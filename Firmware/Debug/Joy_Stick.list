
Joy_Stick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080056c8  080056c8  000066c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005780  08005780  00007074  2**0
                  CONTENTS
  4 .ARM          00000000  08005780  08005780  00007074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005780  08005780  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005780  08005780  00006780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005784  08005784  00006784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08005788  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000074  080057fc  00007074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  080057fc  00007444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd64  00000000  00000000  0000709d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254f  00000000  00000000  00014e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00017350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fb  00000000  00000000  00018048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187ee  00000000  00000000  00018a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115ea  00000000  00000000  00031231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a810  00000000  00000000  0004281b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd02b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ec  00000000  00000000  000cd070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d095c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080056b0 	.word	0x080056b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080056b0 	.word	0x080056b0

0800014c <set_SELECT>:
uint8_t BLUETOOTH;
uint8_t SPEED_BUTTON;
uint8_t STEER_BUTTON;

// For OK button
void set_SELECT() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) SELECT =1;
 8000150:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000154:	4807      	ldr	r0, [pc, #28]	@ (8000174 <set_SELECT+0x28>)
 8000156:	f002 fadd 	bl	8002714 <HAL_GPIO_ReadPin>
 800015a:	4603      	mov	r3, r0
 800015c:	2b00      	cmp	r3, #0
 800015e:	d003      	beq.n	8000168 <set_SELECT+0x1c>
 8000160:	4b05      	ldr	r3, [pc, #20]	@ (8000178 <set_SELECT+0x2c>)
 8000162:	2201      	movs	r2, #1
 8000164:	701a      	strb	r2, [r3, #0]
	else SELECT = 0;
}
 8000166:	e002      	b.n	800016e <set_SELECT+0x22>
	else SELECT = 0;
 8000168:	4b03      	ldr	r3, [pc, #12]	@ (8000178 <set_SELECT+0x2c>)
 800016a:	2200      	movs	r2, #0
 800016c:	701a      	strb	r2, [r3, #0]
}
 800016e:	bf00      	nop
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40010800 	.word	0x40010800
 8000178:	20000090 	.word	0x20000090

0800017c <set_BACK>:

void set_BACK() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) BACK =1;
 8000180:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000184:	4807      	ldr	r0, [pc, #28]	@ (80001a4 <set_BACK+0x28>)
 8000186:	f002 fac5 	bl	8002714 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	2b00      	cmp	r3, #0
 800018e:	d003      	beq.n	8000198 <set_BACK+0x1c>
 8000190:	4b05      	ldr	r3, [pc, #20]	@ (80001a8 <set_BACK+0x2c>)
 8000192:	2201      	movs	r2, #1
 8000194:	701a      	strb	r2, [r3, #0]
	else BACK = 0;
}
 8000196:	e002      	b.n	800019e <set_BACK+0x22>
	else BACK = 0;
 8000198:	4b03      	ldr	r3, [pc, #12]	@ (80001a8 <set_BACK+0x2c>)
 800019a:	2200      	movs	r2, #0
 800019c:	701a      	strb	r2, [r3, #0]
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40010800 	.word	0x40010800
 80001a8:	20000091 	.word	0x20000091

080001ac <set_UP>:

void set_UP() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) UP =1;
 80001b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001b4:	4807      	ldr	r0, [pc, #28]	@ (80001d4 <set_UP+0x28>)
 80001b6:	f002 faad 	bl	8002714 <HAL_GPIO_ReadPin>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d003      	beq.n	80001c8 <set_UP+0x1c>
 80001c0:	4b05      	ldr	r3, [pc, #20]	@ (80001d8 <set_UP+0x2c>)
 80001c2:	2201      	movs	r2, #1
 80001c4:	701a      	strb	r2, [r3, #0]
	else UP = 0;
}
 80001c6:	e002      	b.n	80001ce <set_UP+0x22>
	else UP = 0;
 80001c8:	4b03      	ldr	r3, [pc, #12]	@ (80001d8 <set_UP+0x2c>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	701a      	strb	r2, [r3, #0]
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010800 	.word	0x40010800
 80001d8:	20000092 	.word	0x20000092

080001dc <set_DOWN>:

void set_DOWN() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) DOWN =1;
 80001e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001e4:	4807      	ldr	r0, [pc, #28]	@ (8000204 <set_DOWN+0x28>)
 80001e6:	f002 fa95 	bl	8002714 <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d003      	beq.n	80001f8 <set_DOWN+0x1c>
 80001f0:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <set_DOWN+0x2c>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	701a      	strb	r2, [r3, #0]
	else DOWN = 0;
}
 80001f6:	e002      	b.n	80001fe <set_DOWN+0x22>
	else DOWN = 0;
 80001f8:	4b03      	ldr	r3, [pc, #12]	@ (8000208 <set_DOWN+0x2c>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	701a      	strb	r2, [r3, #0]
}
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40010800 	.word	0x40010800
 8000208:	20000093 	.word	0x20000093

0800020c <set_BLUETOOTH>:

void set_BLUETOOTH() {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) BLUETOOTH =1;
 8000210:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000214:	4807      	ldr	r0, [pc, #28]	@ (8000234 <set_BLUETOOTH+0x28>)
 8000216:	f002 fa7d 	bl	8002714 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d003      	beq.n	8000228 <set_BLUETOOTH+0x1c>
 8000220:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <set_BLUETOOTH+0x2c>)
 8000222:	2201      	movs	r2, #1
 8000224:	701a      	strb	r2, [r3, #0]
	else BLUETOOTH = 0;
}
 8000226:	e002      	b.n	800022e <set_BLUETOOTH+0x22>
	else BLUETOOTH = 0;
 8000228:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <set_BLUETOOTH+0x2c>)
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40010800 	.word	0x40010800
 8000238:	20000094 	.word	0x20000094

0800023c <set_SPEED_BUTTON>:

void set_SPEED_BUTTON() {
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)) SPEED_BUTTON =0;
 8000240:	2108      	movs	r1, #8
 8000242:	4807      	ldr	r0, [pc, #28]	@ (8000260 <set_SPEED_BUTTON+0x24>)
 8000244:	f002 fa66 	bl	8002714 <HAL_GPIO_ReadPin>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d003      	beq.n	8000256 <set_SPEED_BUTTON+0x1a>
 800024e:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <set_SPEED_BUTTON+0x28>)
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
	else SPEED_BUTTON = 1;
}
 8000254:	e002      	b.n	800025c <set_SPEED_BUTTON+0x20>
	else SPEED_BUTTON = 1;
 8000256:	4b03      	ldr	r3, [pc, #12]	@ (8000264 <set_SPEED_BUTTON+0x28>)
 8000258:	2201      	movs	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	40010c00 	.word	0x40010c00
 8000264:	20000095 	.word	0x20000095

08000268 <set_STEER_BUTTON>:

void set_STEER_BUTTON() {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)) STEER_BUTTON =0;
 800026c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000270:	4807      	ldr	r0, [pc, #28]	@ (8000290 <set_STEER_BUTTON+0x28>)
 8000272:	f002 fa4f 	bl	8002714 <HAL_GPIO_ReadPin>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d003      	beq.n	8000284 <set_STEER_BUTTON+0x1c>
 800027c:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <set_STEER_BUTTON+0x2c>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
	else STEER_BUTTON = 1;
}
 8000282:	e002      	b.n	800028a <set_STEER_BUTTON+0x22>
	else STEER_BUTTON = 1;
 8000284:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <set_STEER_BUTTON+0x2c>)
 8000286:	2201      	movs	r2, #1
 8000288:	701a      	strb	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40010800 	.word	0x40010800
 8000294:	20000096 	.word	0x20000096

08000298 <buttons_Init>:

void buttons_Init(){
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	set_SELECT();
 800029c:	f7ff ff56 	bl	800014c <set_SELECT>
	set_BACK();
 80002a0:	f7ff ff6c 	bl	800017c <set_BACK>
	set_UP();
 80002a4:	f7ff ff82 	bl	80001ac <set_UP>
	set_DOWN();
 80002a8:	f7ff ff98 	bl	80001dc <set_DOWN>
	set_BLUETOOTH();
 80002ac:	f7ff ffae 	bl	800020c <set_BLUETOOTH>
	set_SPEED_BUTTON();
 80002b0:	f7ff ffc4 	bl	800023c <set_SPEED_BUTTON>
	set_STEER_BUTTON();
 80002b4:	f7ff ffd8 	bl	8000268 <set_STEER_BUTTON>
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 fedf 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f91f 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f000 faaf 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 80002ce:	f000 fa7f 	bl	80007d0 <MX_DMA_Init>
  MX_ADC1_Init();
 80002d2:	f000 f975 	bl	80005c0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80002d6:	f000 fa51 	bl	800077c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80002da:	f000 f9f7 	bl	80006cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80002de:	f000 fa23 	bl	8000728 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 80002e2:	4879      	ldr	r0, [pc, #484]	@ (80004c8 <main+0x20c>)
 80002e4:	f001 fc2a 	bl	8001b3c <HAL_ADCEx_Calibration_Start>

  uint8_t previousMode = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	71fb      	strb	r3, [r7, #7]

  txPacket.Header = 1100;
 80002ec:	4b77      	ldr	r3, [pc, #476]	@ (80004cc <main+0x210>)
 80002ee:	f240 424c 	movw	r2, #1100	@ 0x44c
 80002f2:	605a      	str	r2, [r3, #4]
  txPacket.Tail = 0011;
 80002f4:	4b75      	ldr	r3, [pc, #468]	@ (80004cc <main+0x210>)
 80002f6:	2209      	movs	r2, #9
 80002f8:	619a      	str	r2, [r3, #24]

  //LCD setup
  I2C_LCD_Init(MyI2C_LCD);
 80002fa:	2000      	movs	r0, #0
 80002fc:	f004 fbb2 	bl	8004a64 <I2C_LCD_Init>
  I2C_LCD_Clear(MyI2C_LCD);
 8000300:	2000      	movs	r0, #0
 8000302:	f004 fc61 	bl	8004bc8 <I2C_LCD_Clear>
  //HAL_ADC_Start_DMA(&hadc1, ADC_results, 6);
  while (1)
  {

	  //0. poll switches
	  switches_Init();
 8000306:	f000 fe4d 	bl	8000fa4 <switches_Init>
	  buttons_Init();
 800030a:	f7ff ffc5 	bl	8000298 <buttons_Init>

	  // 1. If DriveMode = Idle, ADC DMA must stop. (SW50)
	  txPacket.DriveMode = driveMode;
 800030e:	4b70      	ldr	r3, [pc, #448]	@ (80004d0 <main+0x214>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	461a      	mov	r2, r3
 8000314:	4b6d      	ldr	r3, [pc, #436]	@ (80004cc <main+0x210>)
 8000316:	60da      	str	r2, [r3, #12]
	  if (txPacket.DriveMode == 0) {
 8000318:	4b6c      	ldr	r3, [pc, #432]	@ (80004cc <main+0x210>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d10d      	bne.n	800033c <main+0x80>
		  HAL_ADC_Stop_DMA(&hadc1);
 8000320:	4869      	ldr	r0, [pc, #420]	@ (80004c8 <main+0x20c>)
 8000322:	f001 f8eb 	bl	80014fc <HAL_ADC_Stop_DMA>
		  txPacket.WheelAngle = 2048;
 8000326:	4b69      	ldr	r3, [pc, #420]	@ (80004cc <main+0x210>)
 8000328:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800032c:	611a      	str	r2, [r3, #16]
		  txPacket.WheelSpeed = 2048;
 800032e:	4b67      	ldr	r3, [pc, #412]	@ (80004cc <main+0x210>)
 8000330:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000334:	615a      	str	r2, [r3, #20]
		  previousMode = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	71fb      	strb	r3, [r7, #7]
 800033a:	e006      	b.n	800034a <main+0x8e>
		  //HAL_ADC_Start_DMA(&hadc1, ADC_results, 6);
		  //previousMode = 1;
	  //}
	  else {
		  // DMA is already running
	  HAL_ADC_Start_DMA(&hadc1, ADC_results, 6);
 800033c:	2206      	movs	r2, #6
 800033e:	4965      	ldr	r1, [pc, #404]	@ (80004d4 <main+0x218>)
 8000340:	4861      	ldr	r0, [pc, #388]	@ (80004c8 <main+0x20c>)
 8000342:	f000 fffd 	bl	8001340 <HAL_ADC_Start_DMA>
	  		  previousMode = 1;
 8000346:	2301      	movs	r3, #1
 8000348:	71fb      	strb	r3, [r7, #7]
	  }



	  //2. if the screenLight switch is ON (SW3)
	  if (screenLight){
 800034a:	4b63      	ldr	r3, [pc, #396]	@ (80004d8 <main+0x21c>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d003      	beq.n	800035a <main+0x9e>
		  I2C_LCD_Backlight(MyI2C_LCD);
 8000352:	2000      	movs	r0, #0
 8000354:	f004 fcd0 	bl	8004cf8 <I2C_LCD_Backlight>
 8000358:	e002      	b.n	8000360 <main+0xa4>
	  }
	  else I2C_LCD_NoBacklight(MyI2C_LCD);
 800035a:	2000      	movs	r0, #0
 800035c:	f004 fce2 	bl	8004d24 <I2C_LCD_NoBacklight>


	  //3. SW2 to be used for Headlights
	  txPacket.Headlights = SW2_variable;
 8000360:	4b5e      	ldr	r3, [pc, #376]	@ (80004dc <main+0x220>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	461a      	mov	r2, r3
 8000366:	4b59      	ldr	r3, [pc, #356]	@ (80004cc <main+0x210>)
 8000368:	609a      	str	r2, [r3, #8]
	  //4. Write a function here for SW1



	  //5. SW40 controls which analog channel to use
	  if(txPacket.DriveMode !=0) {
 800036a:	4b58      	ldr	r3, [pc, #352]	@ (80004cc <main+0x210>)
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d025      	beq.n	80003be <main+0x102>
		  switch(steeringMode)
 8000372:	4b5b      	ldr	r3, [pc, #364]	@ (80004e0 <main+0x224>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b02      	cmp	r3, #2
 8000378:	d018      	beq.n	80003ac <main+0xf0>
 800037a:	2b02      	cmp	r3, #2
 800037c:	dc1f      	bgt.n	80003be <main+0x102>
 800037e:	2b00      	cmp	r3, #0
 8000380:	d002      	beq.n	8000388 <main+0xcc>
 8000382:	2b01      	cmp	r3, #1
 8000384:	d009      	beq.n	800039a <main+0xde>
 8000386:	e01a      	b.n	80003be <main+0x102>
		  {
			  case 0:
				  txPacket.WheelAngle = ADC_results[0];
 8000388:	4b52      	ldr	r3, [pc, #328]	@ (80004d4 <main+0x218>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a4f      	ldr	r2, [pc, #316]	@ (80004cc <main+0x210>)
 800038e:	6113      	str	r3, [r2, #16]
				  txPacket.WheelSpeed = ADC_results[3];
 8000390:	4b50      	ldr	r3, [pc, #320]	@ (80004d4 <main+0x218>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a4d      	ldr	r2, [pc, #308]	@ (80004cc <main+0x210>)
 8000396:	6153      	str	r3, [r2, #20]
				  break;
 8000398:	e011      	b.n	80003be <main+0x102>

			  case 1:
				  //txPacket.WheelAngle = 1013;
				  //txPacket.WheelSpeed = 1014;
				  txPacket.WheelAngle = ADC_results[4];
 800039a:	4b4e      	ldr	r3, [pc, #312]	@ (80004d4 <main+0x218>)
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	4a4b      	ldr	r2, [pc, #300]	@ (80004cc <main+0x210>)
 80003a0:	6113      	str	r3, [r2, #16]
				  txPacket.WheelSpeed = ADC_results[5];
 80003a2:	4b4c      	ldr	r3, [pc, #304]	@ (80004d4 <main+0x218>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a49      	ldr	r2, [pc, #292]	@ (80004cc <main+0x210>)
 80003a8:	6153      	str	r3, [r2, #20]

				  break;
 80003aa:	e008      	b.n	80003be <main+0x102>

				  // Add case 2 here for the IMU
			  case 2:
				  txPacket.WheelAngle = 1015;
 80003ac:	4b47      	ldr	r3, [pc, #284]	@ (80004cc <main+0x210>)
 80003ae:	f240 32f7 	movw	r2, #1015	@ 0x3f7
 80003b2:	611a      	str	r2, [r3, #16]
				  txPacket.WheelSpeed = 1016;
 80003b4:	4b45      	ldr	r3, [pc, #276]	@ (80004cc <main+0x210>)
 80003b6:	f44f 727e 	mov.w	r2, #1016	@ 0x3f8
 80003ba:	615a      	str	r2, [r3, #20]
				  //txPacket.WheelAngle = ADC_results[0];
				  //txPacket.WheelSpeed = ADC_results[1];

				  break;
 80003bc:	bf00      	nop
		  }
	  }


	  sendPackage();
 80003be:	f000 faf7 	bl	80009b0 <sendPackage>
     else if (driveMode <1) I2C_LCD_WriteString(MyI2C_LCD, "0");
     else I2C_LCD_WriteString(MyI2C_LCD, "1");
*/
// printing button states

	I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2100      	movs	r1, #0
 80003c6:	2000      	movs	r0, #0
 80003c8:	f004 fc3a 	bl	8004c40 <I2C_LCD_SetCursor>
	 if (SELECT ) I2C_LCD_WriteString(MyI2C_LCD, "1");
 80003cc:	4b45      	ldr	r3, [pc, #276]	@ (80004e4 <main+0x228>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d004      	beq.n	80003de <main+0x122>
 80003d4:	4944      	ldr	r1, [pc, #272]	@ (80004e8 <main+0x22c>)
 80003d6:	2000      	movs	r0, #0
 80003d8:	f004 fc74 	bl	8004cc4 <I2C_LCD_WriteString>
 80003dc:	e003      	b.n	80003e6 <main+0x12a>
	 else I2C_LCD_WriteString(MyI2C_LCD, "0");
 80003de:	4943      	ldr	r1, [pc, #268]	@ (80004ec <main+0x230>)
 80003e0:	2000      	movs	r0, #0
 80003e2:	f004 fc6f 	bl	8004cc4 <I2C_LCD_WriteString>

	I2C_LCD_SetCursor(MyI2C_LCD, 1, 1);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2101      	movs	r1, #1
 80003ea:	2000      	movs	r0, #0
 80003ec:	f004 fc28 	bl	8004c40 <I2C_LCD_SetCursor>
	if (BACK)(I2C_LCD_WriteString(MyI2C_LCD, "1"));
 80003f0:	4b3f      	ldr	r3, [pc, #252]	@ (80004f0 <main+0x234>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d004      	beq.n	8000402 <main+0x146>
 80003f8:	493b      	ldr	r1, [pc, #236]	@ (80004e8 <main+0x22c>)
 80003fa:	2000      	movs	r0, #0
 80003fc:	f004 fc62 	bl	8004cc4 <I2C_LCD_WriteString>
 8000400:	e003      	b.n	800040a <main+0x14e>
	else I2C_LCD_WriteString(MyI2C_LCD, "0");
 8000402:	493a      	ldr	r1, [pc, #232]	@ (80004ec <main+0x230>)
 8000404:	2000      	movs	r0, #0
 8000406:	f004 fc5d 	bl	8004cc4 <I2C_LCD_WriteString>

	I2C_LCD_SetCursor(MyI2C_LCD, 2, 1);
 800040a:	2201      	movs	r2, #1
 800040c:	2102      	movs	r1, #2
 800040e:	2000      	movs	r0, #0
 8000410:	f004 fc16 	bl	8004c40 <I2C_LCD_SetCursor>
	if (UP)(I2C_LCD_WriteString(MyI2C_LCD, "1"));
 8000414:	4b37      	ldr	r3, [pc, #220]	@ (80004f4 <main+0x238>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d004      	beq.n	8000426 <main+0x16a>
 800041c:	4932      	ldr	r1, [pc, #200]	@ (80004e8 <main+0x22c>)
 800041e:	2000      	movs	r0, #0
 8000420:	f004 fc50 	bl	8004cc4 <I2C_LCD_WriteString>
 8000424:	e003      	b.n	800042e <main+0x172>
	else I2C_LCD_WriteString(MyI2C_LCD, "0");
 8000426:	4931      	ldr	r1, [pc, #196]	@ (80004ec <main+0x230>)
 8000428:	2000      	movs	r0, #0
 800042a:	f004 fc4b 	bl	8004cc4 <I2C_LCD_WriteString>

	I2C_LCD_SetCursor(MyI2C_LCD, 3, 1);
 800042e:	2201      	movs	r2, #1
 8000430:	2103      	movs	r1, #3
 8000432:	2000      	movs	r0, #0
 8000434:	f004 fc04 	bl	8004c40 <I2C_LCD_SetCursor>
	if (DOWN)(I2C_LCD_WriteString(MyI2C_LCD, "1"));
 8000438:	4b2f      	ldr	r3, [pc, #188]	@ (80004f8 <main+0x23c>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d004      	beq.n	800044a <main+0x18e>
 8000440:	4929      	ldr	r1, [pc, #164]	@ (80004e8 <main+0x22c>)
 8000442:	2000      	movs	r0, #0
 8000444:	f004 fc3e 	bl	8004cc4 <I2C_LCD_WriteString>
 8000448:	e003      	b.n	8000452 <main+0x196>
	else I2C_LCD_WriteString(MyI2C_LCD, "0");
 800044a:	4928      	ldr	r1, [pc, #160]	@ (80004ec <main+0x230>)
 800044c:	2000      	movs	r0, #0
 800044e:	f004 fc39 	bl	8004cc4 <I2C_LCD_WriteString>

	I2C_LCD_SetCursor(MyI2C_LCD, 4, 1);
 8000452:	2201      	movs	r2, #1
 8000454:	2104      	movs	r1, #4
 8000456:	2000      	movs	r0, #0
 8000458:	f004 fbf2 	bl	8004c40 <I2C_LCD_SetCursor>
	if (BLUETOOTH) I2C_LCD_WriteString(MyI2C_LCD, "1");
 800045c:	4b27      	ldr	r3, [pc, #156]	@ (80004fc <main+0x240>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d004      	beq.n	800046e <main+0x1b2>
 8000464:	4920      	ldr	r1, [pc, #128]	@ (80004e8 <main+0x22c>)
 8000466:	2000      	movs	r0, #0
 8000468:	f004 fc2c 	bl	8004cc4 <I2C_LCD_WriteString>
 800046c:	e003      	b.n	8000476 <main+0x1ba>
	else I2C_LCD_WriteString(MyI2C_LCD, "0");
 800046e:	491f      	ldr	r1, [pc, #124]	@ (80004ec <main+0x230>)
 8000470:	2000      	movs	r0, #0
 8000472:	f004 fc27 	bl	8004cc4 <I2C_LCD_WriteString>

	I2C_LCD_SetCursor(MyI2C_LCD, 5, 1);
 8000476:	2201      	movs	r2, #1
 8000478:	2105      	movs	r1, #5
 800047a:	2000      	movs	r0, #0
 800047c:	f004 fbe0 	bl	8004c40 <I2C_LCD_SetCursor>
	if (SPEED_BUTTON) I2C_LCD_WriteString(MyI2C_LCD, "1");
 8000480:	4b1f      	ldr	r3, [pc, #124]	@ (8000500 <main+0x244>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d004      	beq.n	8000492 <main+0x1d6>
 8000488:	4917      	ldr	r1, [pc, #92]	@ (80004e8 <main+0x22c>)
 800048a:	2000      	movs	r0, #0
 800048c:	f004 fc1a 	bl	8004cc4 <I2C_LCD_WriteString>
 8000490:	e003      	b.n	800049a <main+0x1de>
	else I2C_LCD_WriteString(MyI2C_LCD, "0");
 8000492:	4916      	ldr	r1, [pc, #88]	@ (80004ec <main+0x230>)
 8000494:	2000      	movs	r0, #0
 8000496:	f004 fc15 	bl	8004cc4 <I2C_LCD_WriteString>

	I2C_LCD_SetCursor(MyI2C_LCD, 6, 1);
 800049a:	2201      	movs	r2, #1
 800049c:	2106      	movs	r1, #6
 800049e:	2000      	movs	r0, #0
 80004a0:	f004 fbce 	bl	8004c40 <I2C_LCD_SetCursor>
	if (STEER_BUTTON) I2C_LCD_WriteString(MyI2C_LCD, "1");
 80004a4:	4b17      	ldr	r3, [pc, #92]	@ (8000504 <main+0x248>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d004      	beq.n	80004b6 <main+0x1fa>
 80004ac:	490e      	ldr	r1, [pc, #56]	@ (80004e8 <main+0x22c>)
 80004ae:	2000      	movs	r0, #0
 80004b0:	f004 fc08 	bl	8004cc4 <I2C_LCD_WriteString>
 80004b4:	e003      	b.n	80004be <main+0x202>
	else I2C_LCD_WriteString(MyI2C_LCD, "0");
 80004b6:	490d      	ldr	r1, [pc, #52]	@ (80004ec <main+0x230>)
 80004b8:	2000      	movs	r0, #0
 80004ba:	f004 fc03 	bl	8004cc4 <I2C_LCD_WriteString>
	sprintf(MSG, "Joystick1: = %hd \r\n", (uint8_t)Joystick1_XY[0]);
	HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 100);
	sprintf(MSG, "Joystick2: = %hd \r\n", (uint8_t)Joystick2_XY[1]);
	HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), 100);
*/
	HAL_Delay(200);
 80004be:	20c8      	movs	r0, #200	@ 0xc8
 80004c0:	f000 fe42 	bl	8001148 <HAL_Delay>
	  switches_Init();
 80004c4:	e71f      	b.n	8000306 <main+0x4a>
 80004c6:	bf00      	nop
 80004c8:	20000098 	.word	0x20000098
 80004cc:	200002c8 	.word	0x200002c8
 80004d0:	200002e9 	.word	0x200002e9
 80004d4:	20000000 	.word	0x20000000
 80004d8:	200002ea 	.word	0x200002ea
 80004dc:	200002eb 	.word	0x200002eb
 80004e0:	200002e8 	.word	0x200002e8
 80004e4:	20000090 	.word	0x20000090
 80004e8:	080056c8 	.word	0x080056c8
 80004ec:	080056cc 	.word	0x080056cc
 80004f0:	20000091 	.word	0x20000091
 80004f4:	20000092 	.word	0x20000092
 80004f8:	20000093 	.word	0x20000093
 80004fc:	20000094 	.word	0x20000094
 8000500:	20000095 	.word	0x20000095
 8000504:	20000096 	.word	0x20000096

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	@ 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000512:	2228      	movs	r2, #40	@ 0x28
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f004 fc3a 	bl	8004d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	2301      	movs	r3, #1
 8000548:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000552:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000554:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000558:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fda4 	bl	80030ac <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800056a:	f000 fa4b 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800057e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f003 f810 	bl	80035b0 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000596:	f000 fa35 	bl	8000a04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800059a:	2302      	movs	r3, #2
 800059c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800059e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 f990 	bl	80038cc <HAL_RCCEx_PeriphCLKConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005b2:	f000 fa27 	bl	8000a04 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	@ 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d0:	4b3c      	ldr	r3, [pc, #240]	@ (80006c4 <MX_ADC1_Init+0x104>)
 80005d2:	4a3d      	ldr	r2, [pc, #244]	@ (80006c8 <MX_ADC1_Init+0x108>)
 80005d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005d6:	4b3b      	ldr	r3, [pc, #236]	@ (80006c4 <MX_ADC1_Init+0x104>)
 80005d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005de:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <MX_ADC1_Init+0x104>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e4:	4b37      	ldr	r3, [pc, #220]	@ (80006c4 <MX_ADC1_Init+0x104>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ea:	4b36      	ldr	r3, [pc, #216]	@ (80006c4 <MX_ADC1_Init+0x104>)
 80005ec:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f2:	4b34      	ldr	r3, [pc, #208]	@ (80006c4 <MX_ADC1_Init+0x104>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 80005f8:	4b32      	ldr	r3, [pc, #200]	@ (80006c4 <MX_ADC1_Init+0x104>)
 80005fa:	2206      	movs	r2, #6
 80005fc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fe:	4831      	ldr	r0, [pc, #196]	@ (80006c4 <MX_ADC1_Init+0x104>)
 8000600:	f000 fdc6 	bl	8001190 <HAL_ADC_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800060a:	f000 f9fb 	bl	8000a04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000612:	2301      	movs	r3, #1
 8000614:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	4829      	ldr	r0, [pc, #164]	@ (80006c4 <MX_ADC1_Init+0x104>)
 8000620:	f001 f892 	bl	8001748 <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f9eb 	bl	8000a04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800062e:	2301      	movs	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000632:	2302      	movs	r3, #2
 8000634:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4619      	mov	r1, r3
 800063a:	4822      	ldr	r0, [pc, #136]	@ (80006c4 <MX_ADC1_Init+0x104>)
 800063c:	f001 f884 	bl	8001748 <HAL_ADC_ConfigChannel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000646:	f000 f9dd 	bl	8000a04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800064a:	2302      	movs	r3, #2
 800064c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800064e:	2303      	movs	r3, #3
 8000650:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4619      	mov	r1, r3
 8000656:	481b      	ldr	r0, [pc, #108]	@ (80006c4 <MX_ADC1_Init+0x104>)
 8000658:	f001 f876 	bl	8001748 <HAL_ADC_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000662:	f000 f9cf 	bl	8000a04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000666:	2303      	movs	r3, #3
 8000668:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800066a:	2304      	movs	r3, #4
 800066c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4619      	mov	r1, r3
 8000672:	4814      	ldr	r0, [pc, #80]	@ (80006c4 <MX_ADC1_Init+0x104>)
 8000674:	f001 f868 	bl	8001748 <HAL_ADC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800067e:	f000 f9c1 	bl	8000a04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000682:	2304      	movs	r3, #4
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000686:	2305      	movs	r3, #5
 8000688:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4619      	mov	r1, r3
 800068e:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <MX_ADC1_Init+0x104>)
 8000690:	f001 f85a 	bl	8001748 <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800069a:	f000 f9b3 	bl	8000a04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800069e:	2305      	movs	r3, #5
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <MX_ADC1_Init+0x104>)
 80006ac:	f001 f84c 	bl	8001748 <HAL_ADC_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006b6:	f000 f9a5 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000098 	.word	0x20000098
 80006c8:	40012400 	.word	0x40012400

080006cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_I2C1_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	@ (8000720 <MX_I2C1_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_I2C1_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_I2C1_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_I2C1_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	@ (800071c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_I2C1_Init+0x50>)
 800070a:	f002 f833 	bl	8002774 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 f976 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000010c 	.word	0x2000010c
 8000720:	40005400 	.word	0x40005400
 8000724:	000186a0 	.word	0x000186a0

08000728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_USART1_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000734:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000760:	f003 fa20 	bl	8003ba4 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f94b 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000160 	.word	0x20000160
 8000778:	40013800 	.word	0x40013800

0800077c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <MX_USART3_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007a2:	2208      	movs	r2, #8
 80007a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007b4:	f003 f9f6 	bl	8003ba4 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f921 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200001a8 	.word	0x200001a8
 80007cc:	40004800 	.word	0x40004800

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_DMA_Init+0x58>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a13      	ldr	r2, [pc, #76]	@ (8000828 <MX_DMA_Init+0x58>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_DMA_Init+0x58>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	200b      	movs	r0, #11
 80007f4:	f001 fb31 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007f8:	200b      	movs	r0, #11
 80007fa:	f001 fb4a 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	200c      	movs	r0, #12
 8000804:	f001 fb29 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000808:	200c      	movs	r0, #12
 800080a:	f001 fb42 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	200e      	movs	r0, #14
 8000814:	f001 fb21 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000818:	200e      	movs	r0, #14
 800081a:	f001 fb3a 	bl	8001e92 <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000840:	4b46      	ldr	r3, [pc, #280]	@ (800095c <MX_GPIO_Init+0x130>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a45      	ldr	r2, [pc, #276]	@ (800095c <MX_GPIO_Init+0x130>)
 8000846:	f043 0320 	orr.w	r3, r3, #32
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b43      	ldr	r3, [pc, #268]	@ (800095c <MX_GPIO_Init+0x130>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0320 	and.w	r3, r3, #32
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b40      	ldr	r3, [pc, #256]	@ (800095c <MX_GPIO_Init+0x130>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a3f      	ldr	r2, [pc, #252]	@ (800095c <MX_GPIO_Init+0x130>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b3d      	ldr	r3, [pc, #244]	@ (800095c <MX_GPIO_Init+0x130>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000870:	4b3a      	ldr	r3, [pc, #232]	@ (800095c <MX_GPIO_Init+0x130>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a39      	ldr	r2, [pc, #228]	@ (800095c <MX_GPIO_Init+0x130>)
 8000876:	f043 0308 	orr.w	r3, r3, #8
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b37      	ldr	r3, [pc, #220]	@ (800095c <MX_GPIO_Init+0x130>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2140      	movs	r1, #64	@ 0x40
 800088c:	4834      	ldr	r0, [pc, #208]	@ (8000960 <MX_GPIO_Init+0x134>)
 800088e:	f001 ff58 	bl	8002742 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_EN_OUT_GPIO_Port, BT_EN_OUT_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2110      	movs	r1, #16
 8000896:	4833      	ldr	r0, [pc, #204]	@ (8000964 <MX_GPIO_Init+0x138>)
 8000898:	f001 ff53 	bl	8002742 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800089c:	2340      	movs	r3, #64	@ 0x40
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	482b      	ldr	r0, [pc, #172]	@ (8000960 <MX_GPIO_Init+0x134>)
 80008b4:	f001 fdaa 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin E_backlight_toggle_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|E_backlight_toggle_Pin;
 80008b8:	f44f 5384 	mov.w	r3, #4224	@ 0x1080
 80008bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	4619      	mov	r1, r3
 80008cc:	4824      	ldr	r0, [pc, #144]	@ (8000960 <MX_GPIO_Init+0x134>)
 80008ce:	f001 fd9d 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin Steer_SW2_Pin Steer_SW1_Pin
                           Speed_SW2_Pin Speed_SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin|Steer_SW2_Pin|Steer_SW1_Pin
 80008d2:	f24f 0303 	movw	r3, #61443	@ 0xf003
 80008d6:	613b      	str	r3, [r7, #16]
                          |Speed_SW2_Pin|Speed_SW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	481f      	ldr	r0, [pc, #124]	@ (8000964 <MX_GPIO_Init+0x138>)
 80008e8:	f001 fd90 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Select_Pin B_Back_Pin C_Up_Pin D_Down_Pin
                           Steers_Button_Pin */
  GPIO_InitStruct.Pin = A_Select_Pin|B_Back_Pin|C_Up_Pin|D_Down_Pin
 80008ec:	f44f 430f 	mov.w	r3, #36608	@ 0x8f00
 80008f0:	613b      	str	r3, [r7, #16]
                          |Steers_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	4817      	ldr	r0, [pc, #92]	@ (8000960 <MX_GPIO_Init+0x134>)
 8000902:	f001 fd83 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : Speed_Button_Pin */
  GPIO_InitStruct.Pin = Speed_Button_Pin;
 8000906:	2308      	movs	r3, #8
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Speed_Button_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4619      	mov	r1, r3
 8000918:	4812      	ldr	r0, [pc, #72]	@ (8000964 <MX_GPIO_Init+0x138>)
 800091a:	f001 fd77 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_EN_OUT_Pin */
  GPIO_InitStruct.Pin = BT_EN_OUT_Pin;
 800091e:	2310      	movs	r3, #16
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2302      	movs	r3, #2
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_EN_OUT_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4619      	mov	r1, r3
 8000934:	480b      	ldr	r0, [pc, #44]	@ (8000964 <MX_GPIO_Init+0x138>)
 8000936:	f001 fd69 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_STATE_IN_Pin */
  GPIO_InitStruct.Pin = BT_STATE_IN_Pin;
 800093a:	2320      	movs	r3, #32
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT_STATE_IN_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_GPIO_Init+0x138>)
 800094e:	f001 fd5d 	bl	800240c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000
 8000960:	40010800 	.word	0x40010800
 8000964:	40010c00 	.word	0x40010c00

08000968 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	txPacket.isValid = 1;
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_ADC_ConvCpltCallback+0x20>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
	txPacket.Sent_received = 0;
 8000976:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <HAL_ADC_ConvCpltCallback+0x20>)
 8000978:	2200      	movs	r2, #0
 800097a:	771a      	strb	r2, [r3, #28]
			(unsigned int)ADC_results[4],
			(unsigned int)ADC_results[5]);
			*/
	//HAL_UART_Transmit_DMA(&huart3, Package, sizeof(Package));

}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	200002c8 	.word	0x200002c8

0800098c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart){
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	txPacket.isValid = 0;
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_UART_TxCpltCallback+0x20>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
	txPacket.Sent_received = 1;
 800099a:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <HAL_UART_TxCpltCallback+0x20>)
 800099c:	2201      	movs	r2, #1
 800099e:	771a      	strb	r2, [r3, #28]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200002c8 	.word	0x200002c8

080009b0 <sendPackage>:

void sendPackage(void){
 80009b0:	b5b0      	push	{r4, r5, r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af04      	add	r7, sp, #16
	sprintf((char*)Package, "%04u %04u %04u %04u %04u %04u\n",
			(unsigned int)txPacket.Header,
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <sendPackage+0x44>)
 80009b8:	685c      	ldr	r4, [r3, #4]
			(unsigned int)txPacket.Headlights,
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <sendPackage+0x44>)
 80009bc:	689d      	ldr	r5, [r3, #8]
			(unsigned int)txPacket.DriveMode,
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <sendPackage+0x44>)
 80009c0:	68db      	ldr	r3, [r3, #12]
			(unsigned int)txPacket.WheelAngle,
 80009c2:	4a0c      	ldr	r2, [pc, #48]	@ (80009f4 <sendPackage+0x44>)
 80009c4:	6912      	ldr	r2, [r2, #16]
			(unsigned int)txPacket.WheelSpeed,
 80009c6:	490b      	ldr	r1, [pc, #44]	@ (80009f4 <sendPackage+0x44>)
 80009c8:	6949      	ldr	r1, [r1, #20]
			(unsigned int)txPacket.Tail);
 80009ca:	480a      	ldr	r0, [pc, #40]	@ (80009f4 <sendPackage+0x44>)
 80009cc:	6980      	ldr	r0, [r0, #24]
	sprintf((char*)Package, "%04u %04u %04u %04u %04u %04u\n",
 80009ce:	9003      	str	r0, [sp, #12]
 80009d0:	9102      	str	r1, [sp, #8]
 80009d2:	9201      	str	r2, [sp, #4]
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	462b      	mov	r3, r5
 80009d8:	4622      	mov	r2, r4
 80009da:	4907      	ldr	r1, [pc, #28]	@ (80009f8 <sendPackage+0x48>)
 80009dc:	4807      	ldr	r0, [pc, #28]	@ (80009fc <sendPackage+0x4c>)
 80009de:	f004 f9b7 	bl	8004d50 <siprintf>
	//HAL_UART_Transmit_DMA(&huart3, Package, sizeof(Package));
	HAL_UART_Transmit_DMA(&huart1, Package, sizeof(Package));
 80009e2:	2250      	movs	r2, #80	@ 0x50
 80009e4:	4905      	ldr	r1, [pc, #20]	@ (80009fc <sendPackage+0x4c>)
 80009e6:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <sendPackage+0x50>)
 80009e8:	f003 f92c 	bl	8003c44 <HAL_UART_Transmit_DMA>
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bdb0      	pop	{r4, r5, r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200002c8 	.word	0x200002c8
 80009f8:	080056d0 	.word	0x080056d0
 80009fc:	20000278 	.word	0x20000278
 8000a00:	20000160 	.word	0x20000160

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_MspInit+0x60>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_MspInit+0x60>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010000 	.word	0x40010000

08000a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b40 <HAL_ADC_MspInit+0xcc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d151      	bne.n	8000b38 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a94:	4b2b      	ldr	r3, [pc, #172]	@ (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a2a      	ldr	r2, [pc, #168]	@ (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a24      	ldr	r2, [pc, #144]	@ (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b22      	ldr	r3, [pc, #136]	@ (8000b44 <HAL_ADC_MspInit+0xd0>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Speed_VRx_Pin|Speed_VRy_Pin|Steer_VRx_Pin|Steer_VRy_Pin
 8000ac4:	233f      	movs	r3, #63	@ 0x3f
 8000ac6:	613b      	str	r3, [r7, #16]
                          |Speed_Pot_Pin|Steer_Pot_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481d      	ldr	r0, [pc, #116]	@ (8000b48 <HAL_ADC_MspInit+0xd4>)
 8000ad4:	f001 fc9a 	bl	800240c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000ada:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <HAL_ADC_MspInit+0xdc>)
 8000adc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000af2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000af6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000afa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000afe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000b02:	2220      	movs	r2, #32
 8000b04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b0c:	480f      	ldr	r0, [pc, #60]	@ (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000b0e:	f001 f9db 	bl	8001ec8 <HAL_DMA_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000b18:	f7ff ff74 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000b20:	621a      	str	r2, [r3, #32]
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <HAL_ADC_MspInit+0xd8>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2012      	movs	r0, #18
 8000b2e:	f001 f994 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b32:	2012      	movs	r0, #18
 8000b34:	f001 f9ad 	bl	8001e92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40012400 	.word	0x40012400
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	200000c8 	.word	0x200000c8
 8000b50:	40020008 	.word	0x40020008

08000b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000be4 <HAL_I2C_MspInit+0x90>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d132      	bne.n	8000bda <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <HAL_I2C_MspInit+0x94>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1b      	ldr	r2, [pc, #108]	@ (8000be8 <HAL_I2C_MspInit+0x94>)
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <HAL_I2C_MspInit+0x94>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b92:	2312      	movs	r3, #18
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4812      	ldr	r0, [pc, #72]	@ (8000bec <HAL_I2C_MspInit+0x98>)
 8000ba2:	f001 fc33 	bl	800240c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <HAL_I2C_MspInit+0x9c>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bae:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <HAL_I2C_MspInit+0x9c>)
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <HAL_I2C_MspInit+0x94>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a08      	ldr	r2, [pc, #32]	@ (8000be8 <HAL_I2C_MspInit+0x94>)
 8000bc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_I2C_MspInit+0x94>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	@ 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40005400 	.word	0x40005400
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010c00 	.word	0x40010c00
 8000bf0:	40010000 	.word	0x40010000

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	@ 0x30
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a68      	ldr	r2, [pc, #416]	@ (8000db0 <HAL_UART_MspInit+0x1bc>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d164      	bne.n	8000cde <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b67      	ldr	r3, [pc, #412]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a66      	ldr	r2, [pc, #408]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b64      	ldr	r3, [pc, #400]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b61      	ldr	r3, [pc, #388]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a60      	ldr	r2, [pc, #384]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b5e      	ldr	r3, [pc, #376]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c44:	2340      	movs	r3, #64	@ 0x40
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4858      	ldr	r0, [pc, #352]	@ (8000db8 <HAL_UART_MspInit+0x1c4>)
 8000c58:	f001 fbd8 	bl	800240c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c5c:	2380      	movs	r3, #128	@ 0x80
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4852      	ldr	r0, [pc, #328]	@ (8000db8 <HAL_UART_MspInit+0x1c4>)
 8000c70:	f001 fbcc 	bl	800240c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000c74:	4b51      	ldr	r3, [pc, #324]	@ (8000dbc <HAL_UART_MspInit+0x1c8>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c7c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c8a:	4a4c      	ldr	r2, [pc, #304]	@ (8000dbc <HAL_UART_MspInit+0x1c8>)
 8000c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c8e:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000c90:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc0 <HAL_UART_MspInit+0x1cc>)
 8000c92:	4a4c      	ldr	r2, [pc, #304]	@ (8000dc4 <HAL_UART_MspInit+0x1d0>)
 8000c94:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c96:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc0 <HAL_UART_MspInit+0x1cc>)
 8000c98:	2210      	movs	r2, #16
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9c:	4b48      	ldr	r3, [pc, #288]	@ (8000dc0 <HAL_UART_MspInit+0x1cc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca2:	4b47      	ldr	r3, [pc, #284]	@ (8000dc0 <HAL_UART_MspInit+0x1cc>)
 8000ca4:	2280      	movs	r2, #128	@ 0x80
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ca8:	4b45      	ldr	r3, [pc, #276]	@ (8000dc0 <HAL_UART_MspInit+0x1cc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cae:	4b44      	ldr	r3, [pc, #272]	@ (8000dc0 <HAL_UART_MspInit+0x1cc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000cb4:	4b42      	ldr	r3, [pc, #264]	@ (8000dc0 <HAL_UART_MspInit+0x1cc>)
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cba:	4b41      	ldr	r3, [pc, #260]	@ (8000dc0 <HAL_UART_MspInit+0x1cc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000cc0:	483f      	ldr	r0, [pc, #252]	@ (8000dc0 <HAL_UART_MspInit+0x1cc>)
 8000cc2:	f001 f901 	bl	8001ec8 <HAL_DMA_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8000ccc:	f7ff fe9a 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3b      	ldr	r2, [pc, #236]	@ (8000dc0 <HAL_UART_MspInit+0x1cc>)
 8000cd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cd6:	4a3a      	ldr	r2, [pc, #232]	@ (8000dc0 <HAL_UART_MspInit+0x1cc>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cdc:	e064      	b.n	8000da8 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a39      	ldr	r2, [pc, #228]	@ (8000dc8 <HAL_UART_MspInit+0x1d4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d15f      	bne.n	8000da8 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce8:	4b32      	ldr	r3, [pc, #200]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	4a31      	ldr	r2, [pc, #196]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000cee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf2:	61d3      	str	r3, [r2, #28]
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a2b      	ldr	r2, [pc, #172]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b29      	ldr	r3, [pc, #164]	@ (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4822      	ldr	r0, [pc, #136]	@ (8000db8 <HAL_UART_MspInit+0x1c4>)
 8000d2e:	f001 fb6d 	bl	800240c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	481c      	ldr	r0, [pc, #112]	@ (8000db8 <HAL_UART_MspInit+0x1c4>)
 8000d48:	f001 fb60 	bl	800240c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <HAL_UART_MspInit+0x1d8>)
 8000d4e:	4a20      	ldr	r2, [pc, #128]	@ (8000dd0 <HAL_UART_MspInit+0x1dc>)
 8000d50:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <HAL_UART_MspInit+0x1d8>)
 8000d54:	2210      	movs	r2, #16
 8000d56:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <HAL_UART_MspInit+0x1d8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <HAL_UART_MspInit+0x1d8>)
 8000d60:	2280      	movs	r2, #128	@ 0x80
 8000d62:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <HAL_UART_MspInit+0x1d8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <HAL_UART_MspInit+0x1d8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8000d70:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <HAL_UART_MspInit+0x1d8>)
 8000d72:	2220      	movs	r2, #32
 8000d74:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <HAL_UART_MspInit+0x1d8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000d7c:	4813      	ldr	r0, [pc, #76]	@ (8000dcc <HAL_UART_MspInit+0x1d8>)
 8000d7e:	f001 f8a3 	bl	8001ec8 <HAL_DMA_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_UART_MspInit+0x198>
      Error_Handler();
 8000d88:	f7ff fe3c 	bl	8000a04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dcc <HAL_UART_MspInit+0x1d8>)
 8000d90:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d92:	4a0e      	ldr	r2, [pc, #56]	@ (8000dcc <HAL_UART_MspInit+0x1d8>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2027      	movs	r0, #39	@ 0x27
 8000d9e:	f001 f85c 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000da2:	2027      	movs	r0, #39	@ 0x27
 8000da4:	f001 f875 	bl	8001e92 <HAL_NVIC_EnableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	3730      	adds	r7, #48	@ 0x30
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40013800 	.word	0x40013800
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010c00 	.word	0x40010c00
 8000dbc:	40010000 	.word	0x40010000
 8000dc0:	200001f0 	.word	0x200001f0
 8000dc4:	40020044 	.word	0x40020044
 8000dc8:	40004800 	.word	0x40004800
 8000dcc:	20000234 	.word	0x20000234
 8000dd0:	4002001c 	.word	0x4002001c

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <NMI_Handler+0x4>

08000ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <MemManage_Handler+0x4>

08000dec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f974 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //SysTick_CallBack();

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <DMA1_Channel1_IRQHandler+0x10>)
 8000e32:	f001 f9b7 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200000c8 	.word	0x200000c8

08000e40 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <DMA1_Channel2_IRQHandler+0x10>)
 8000e46:	f001 f9ad 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000234 	.word	0x20000234

08000e54 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <DMA1_Channel4_IRQHandler+0x10>)
 8000e5a:	f001 f9a3 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001f0 	.word	0x200001f0

08000e68 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <ADC1_2_IRQHandler+0x10>)
 8000e6e:	f000 fb91 	bl	8001594 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000098 	.word	0x20000098

08000e7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <USART3_IRQHandler+0x10>)
 8000e82:	f002 ff4f 	bl	8003d24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001a8 	.word	0x200001a8

08000e90 <set_steeringMode>:
uint8_t screenLight;
uint8_t SW2_variable;
uint8_t SW1_variable;

//For STEERING SWITCH
void set_steeringMode() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) steeringMode =1;
 8000e94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e98:	480d      	ldr	r0, [pc, #52]	@ (8000ed0 <set_steeringMode+0x40>)
 8000e9a:	f001 fc3b 	bl	8002714 <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <set_steeringMode+0x1c>
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <set_steeringMode+0x44>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)) steeringMode = 2;
	else steeringMode = 0;
}
 8000eaa:	e00e      	b.n	8000eca <set_steeringMode+0x3a>
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)) steeringMode = 2;
 8000eac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb0:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <set_steeringMode+0x40>)
 8000eb2:	f001 fc2f 	bl	8002714 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <set_steeringMode+0x34>
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <set_steeringMode+0x44>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	701a      	strb	r2, [r3, #0]
}
 8000ec2:	e002      	b.n	8000eca <set_steeringMode+0x3a>
	else steeringMode = 0;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <set_steeringMode+0x44>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	200002e8 	.word	0x200002e8

08000ed8 <set_driveMode>:

//FOR SPEED SPEECH
void set_driveMode() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) driveMode =1;
 8000edc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <set_driveMode+0x40>)
 8000ee2:	f001 fc17 	bl	8002714 <HAL_GPIO_ReadPin>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <set_driveMode+0x1c>
 8000eec:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <set_driveMode+0x44>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)) driveMode = 2;
	else driveMode = 0;
}
 8000ef2:	e00e      	b.n	8000f12 <set_driveMode+0x3a>
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)) driveMode = 2;
 8000ef4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ef8:	4807      	ldr	r0, [pc, #28]	@ (8000f18 <set_driveMode+0x40>)
 8000efa:	f001 fc0b 	bl	8002714 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <set_driveMode+0x34>
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <set_driveMode+0x44>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	701a      	strb	r2, [r3, #0]
}
 8000f0a:	e002      	b.n	8000f12 <set_driveMode+0x3a>
	else driveMode = 0;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <set_driveMode+0x44>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40010c00 	.word	0x40010c00
 8000f1c:	200002e9 	.word	0x200002e9

08000f20 <set_screenLight>:

//FOR SW3
void set_screenLight() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))screenLight = 1;
 8000f24:	2102      	movs	r1, #2
 8000f26:	4807      	ldr	r0, [pc, #28]	@ (8000f44 <set_screenLight+0x24>)
 8000f28:	f001 fbf4 	bl	8002714 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <set_screenLight+0x1a>
 8000f32:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <set_screenLight+0x28>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
	else screenLight = 0;
}
 8000f38:	e002      	b.n	8000f40 <set_screenLight+0x20>
	else screenLight = 0;
 8000f3a:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <set_screenLight+0x28>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40010c00 	.word	0x40010c00
 8000f48:	200002ea 	.word	0x200002ea

08000f4c <set_SW2_variable>:

//FOR SW2
void set_SW2_variable() {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

	// to be updated.
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))SW2_variable = 1;
 8000f50:	2101      	movs	r1, #1
 8000f52:	4807      	ldr	r0, [pc, #28]	@ (8000f70 <set_SW2_variable+0x24>)
 8000f54:	f001 fbde 	bl	8002714 <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <set_SW2_variable+0x1a>
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <set_SW2_variable+0x28>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
	else SW2_variable = 0;
}
 8000f64:	e002      	b.n	8000f6c <set_SW2_variable+0x20>
	else SW2_variable = 0;
 8000f66:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <set_SW2_variable+0x28>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	200002eb 	.word	0x200002eb

08000f78 <set_SW1_variable>:

//FOR SW1
void set_SW1_variable() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

	//To be updated
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))SW1_variable = 1;
 8000f7c:	2180      	movs	r1, #128	@ 0x80
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <set_SW1_variable+0x24>)
 8000f80:	f001 fbc8 	bl	8002714 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <set_SW1_variable+0x1a>
 8000f8a:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <set_SW1_variable+0x28>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
	else SW1_variable = 0;
}
 8000f90:	e002      	b.n	8000f98 <set_SW1_variable+0x20>
	else SW1_variable = 0;
 8000f92:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <set_SW1_variable+0x28>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	200002ec 	.word	0x200002ec

08000fa4 <switches_Init>:

void switches_Init() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	set_steeringMode();
 8000fa8:	f7ff ff72 	bl	8000e90 <set_steeringMode>
	set_driveMode();
 8000fac:	f7ff ff94 	bl	8000ed8 <set_driveMode>
	set_screenLight();
 8000fb0:	f7ff ffb6 	bl	8000f20 <set_screenLight>
	set_SW2_variable();
 8000fb4:	f7ff ffca 	bl	8000f4c <set_SW2_variable>
	set_SW1_variable();
 8000fb8:	f7ff ffde 	bl	8000f78 <set_SW1_variable>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc8:	4a14      	ldr	r2, [pc, #80]	@ (800101c <_sbrk+0x5c>)
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <_sbrk+0x60>)
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <_sbrk+0x64>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	@ (8001028 <_sbrk+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d207      	bcs.n	8001000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff0:	f003 fed6 	bl	8004da0 <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	e009      	b.n	8001014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001006:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <_sbrk+0x64>)
 8001010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20005000 	.word	0x20005000
 8001020:	00000400 	.word	0x00000400
 8001024:	200002f0 	.word	0x200002f0
 8001028:	20000448 	.word	0x20000448

0800102c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001038:	f7ff fff8 	bl	800102c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480b      	ldr	r0, [pc, #44]	@ (800106c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800103e:	490c      	ldr	r1, [pc, #48]	@ (8001070 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001040:	4a0c      	ldr	r2, [pc, #48]	@ (8001074 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a09      	ldr	r2, [pc, #36]	@ (8001078 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001054:	4c09      	ldr	r4, [pc, #36]	@ (800107c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001062:	f003 fea3 	bl	8004dac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001066:	f7ff f929 	bl	80002bc <main>
  bx lr
 800106a:	4770      	bx	lr
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001074:	08005788 	.word	0x08005788
  ldr r2, =_sbss
 8001078:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800107c:	20000444 	.word	0x20000444

08001080 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <CAN1_RX1_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_Init+0x28>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <HAL_Init+0x28>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 fed5 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	200f      	movs	r0, #15
 800109c:	f000 f808 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff fcb6 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 feed 	bl	8001eae <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 feb5 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	@ (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000018 	.word	0x20000018
 8001108:	20000020 	.word	0x20000020
 800110c:	2000001c 	.word	0x2000001c

08001110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_IncTick+0x1c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_IncTick+0x20>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a03      	ldr	r2, [pc, #12]	@ (8001130 <HAL_IncTick+0x20>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	20000020 	.word	0x20000020
 8001130:	200002f4 	.word	0x200002f4

08001134 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b02      	ldr	r3, [pc, #8]	@ (8001144 <HAL_GetTick+0x10>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	200002f4 	.word	0x200002f4

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff fff0 	bl	8001134 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffe0 	bl	8001134 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000020 	.word	0x20000020

08001190 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0be      	b.n	8001330 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fc50 	bl	8000a74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fc09 	bl	80019ec <ADC_ConversionStop_Disable>
 80011da:	4603      	mov	r3, r0
 80011dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 8099 	bne.w	800131e <HAL_ADC_Init+0x18e>
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f040 8095 	bne.w	800131e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011fc:	f023 0302 	bic.w	r3, r3, #2
 8001200:	f043 0202 	orr.w	r2, r3, #2
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001210:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7b1b      	ldrb	r3, [r3, #12]
 8001216:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001218:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	4313      	orrs	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001228:	d003      	beq.n	8001232 <HAL_ADC_Init+0xa2>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d102      	bne.n	8001238 <HAL_ADC_Init+0xa8>
 8001232:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001236:	e000      	b.n	800123a <HAL_ADC_Init+0xaa>
 8001238:	2300      	movs	r3, #0
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7d1b      	ldrb	r3, [r3, #20]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d119      	bne.n	800127c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7b1b      	ldrb	r3, [r3, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d109      	bne.n	8001264 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	3b01      	subs	r3, #1
 8001256:	035a      	lsls	r2, r3, #13
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	e00b      	b.n	800127c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001268:	f043 0220 	orr.w	r2, r3, #32
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001274:	f043 0201 	orr.w	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	430a      	orrs	r2, r1
 800128e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	4b28      	ldr	r3, [pc, #160]	@ (8001338 <HAL_ADC_Init+0x1a8>)
 8001298:	4013      	ands	r3, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012ac:	d003      	beq.n	80012b6 <HAL_ADC_Init+0x126>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d104      	bne.n	80012c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	051b      	lsls	r3, r3, #20
 80012be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <HAL_ADC_Init+0x1ac>)
 80012dc:	4013      	ands	r3, r2
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d10b      	bne.n	80012fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ee:	f023 0303 	bic.w	r3, r3, #3
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012fa:	e018      	b.n	800132e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001300:	f023 0312 	bic.w	r3, r3, #18
 8001304:	f043 0210 	orr.w	r2, r3, #16
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800131c:	e007      	b.n	800132e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001322:	f043 0210 	orr.w	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	ffe1f7fd 	.word	0xffe1f7fd
 800133c:	ff1f0efe 	.word	0xff1f0efe

08001340 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a64      	ldr	r2, [pc, #400]	@ (80014e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d004      	beq.n	8001364 <HAL_ADC_Start_DMA+0x24>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a63      	ldr	r2, [pc, #396]	@ (80014ec <HAL_ADC_Start_DMA+0x1ac>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d106      	bne.n	8001372 <HAL_ADC_Start_DMA+0x32>
 8001364:	4b60      	ldr	r3, [pc, #384]	@ (80014e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f040 80b3 	bne.w	80014d8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_ADC_Start_DMA+0x40>
 800137c:	2302      	movs	r3, #2
 800137e:	e0ae      	b.n	80014de <HAL_ADC_Start_DMA+0x19e>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 fad5 	bl	8001938 <ADC_Enable>
 800138e:	4603      	mov	r3, r0
 8001390:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001392:	7dfb      	ldrb	r3, [r7, #23]
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 809a 	bne.w	80014ce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a4e      	ldr	r2, [pc, #312]	@ (80014ec <HAL_ADC_Start_DMA+0x1ac>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d105      	bne.n	80013c4 <HAL_ADC_Start_DMA+0x84>
 80013b8:	4b4b      	ldr	r3, [pc, #300]	@ (80014e8 <HAL_ADC_Start_DMA+0x1a8>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d115      	bne.n	80013f0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d026      	beq.n	800142c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ee:	e01d      	b.n	800142c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a39      	ldr	r2, [pc, #228]	@ (80014e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d004      	beq.n	8001410 <HAL_ADC_Start_DMA+0xd0>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a38      	ldr	r2, [pc, #224]	@ (80014ec <HAL_ADC_Start_DMA+0x1ac>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d10d      	bne.n	800142c <HAL_ADC_Start_DMA+0xec>
 8001410:	4b35      	ldr	r3, [pc, #212]	@ (80014e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001420:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001424:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001430:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143c:	f023 0206 	bic.w	r2, r3, #6
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001444:	e002      	b.n	800144c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4a25      	ldr	r2, [pc, #148]	@ (80014f0 <HAL_ADC_Start_DMA+0x1b0>)
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	4a24      	ldr	r2, [pc, #144]	@ (80014f4 <HAL_ADC_Start_DMA+0x1b4>)
 8001462:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a23      	ldr	r2, [pc, #140]	@ (80014f8 <HAL_ADC_Start_DMA+0x1b8>)
 800146a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f06f 0202 	mvn.w	r2, #2
 8001474:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001484:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a18      	ldr	r0, [r3, #32]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	334c      	adds	r3, #76	@ 0x4c
 8001490:	4619      	mov	r1, r3
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f000 fd71 	bl	8001f7c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80014a4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80014a8:	d108      	bne.n	80014bc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80014b8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80014ba:	e00f      	b.n	80014dc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80014ca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80014cc:	e006      	b.n	80014dc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80014d6:	e001      	b.n	80014dc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40012400 	.word	0x40012400
 80014ec:	40012800 	.word	0x40012800
 80014f0:	08001a6f 	.word	0x08001a6f
 80014f4:	08001aeb 	.word	0x08001aeb
 80014f8:	08001b07 	.word	0x08001b07

080014fc <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ADC_Stop_DMA+0x1a>
 8001512:	2302      	movs	r3, #2
 8001514:	e03a      	b.n	800158c <HAL_ADC_Stop_DMA+0x90>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fa64 	bl	80019ec <ADC_ConversionStop_Disable>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d129      	bne.n	8001582 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800153c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d11a      	bne.n	8001582 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fd73 	bl	800203c <HAL_DMA_Abort>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10a      	bne.n	8001576 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	@ 0x28
 8001574:	e005      	b.n	8001582 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f003 0320 	and.w	r3, r3, #32
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d03e      	beq.n	8001634 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d039      	beq.n	8001634 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015e2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015e6:	d11d      	bne.n	8001624 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d119      	bne.n	8001624 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0220 	bic.w	r2, r2, #32
 80015fe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001610:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff f99f 	bl	8000968 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f06f 0212 	mvn.w	r2, #18
 8001632:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163a:	2b00      	cmp	r3, #0
 800163c:	d04d      	beq.n	80016da <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d048      	beq.n	80016da <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	d105      	bne.n	8001660 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001658:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800166a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800166e:	d012      	beq.n	8001696 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800167a:	2b00      	cmp	r3, #0
 800167c:	d125      	bne.n	80016ca <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001688:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800168c:	d11d      	bne.n	80016ca <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016a4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d105      	bne.n	80016ca <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fae4 	bl	8001c98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f06f 020c 	mvn.w	r2, #12
 80016d8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d012      	beq.n	800170a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00d      	beq.n	800170a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f812 	bl	8001724 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f06f 0201 	mvn.w	r2, #1
 8001708:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x20>
 8001764:	2302      	movs	r3, #2
 8001766:	e0dc      	b.n	8001922 <HAL_ADC_ConfigChannel+0x1da>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b06      	cmp	r3, #6
 8001776:	d81c      	bhi.n	80017b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3b05      	subs	r3, #5
 800178a:	221f      	movs	r2, #31
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	4019      	ands	r1, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b05      	subs	r3, #5
 80017a4:	fa00 f203 	lsl.w	r2, r0, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80017b0:	e03c      	b.n	800182c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d81c      	bhi.n	80017f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3b23      	subs	r3, #35	@ 0x23
 80017cc:	221f      	movs	r2, #31
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4019      	ands	r1, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	3b23      	subs	r3, #35	@ 0x23
 80017e6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80017f2:	e01b      	b.n	800182c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	3b41      	subs	r3, #65	@ 0x41
 8001806:	221f      	movs	r2, #31
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4019      	ands	r1, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b41      	subs	r3, #65	@ 0x41
 8001820:	fa00 f203 	lsl.w	r2, r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b09      	cmp	r3, #9
 8001832:	d91c      	bls.n	800186e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68d9      	ldr	r1, [r3, #12]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	3b1e      	subs	r3, #30
 8001846:	2207      	movs	r2, #7
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	4019      	ands	r1, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6898      	ldr	r0, [r3, #8]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	3b1e      	subs	r3, #30
 8001860:	fa00 f203 	lsl.w	r2, r0, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	e019      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6919      	ldr	r1, [r3, #16]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	2207      	movs	r2, #7
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	4019      	ands	r1, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6898      	ldr	r0, [r3, #8]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	fa00 f203 	lsl.w	r2, r0, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b10      	cmp	r3, #16
 80018a8:	d003      	beq.n	80018b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018ae:	2b11      	cmp	r3, #17
 80018b0:	d132      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1d      	ldr	r2, [pc, #116]	@ (800192c <HAL_ADC_ConfigChannel+0x1e4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d125      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d126      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80018d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d11a      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <HAL_ADC_ConfigChannel+0x1e8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a13      	ldr	r2, [pc, #76]	@ (8001934 <HAL_ADC_ConfigChannel+0x1ec>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	0c9a      	lsrs	r2, r3, #18
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018f8:	e002      	b.n	8001900 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f9      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x1b2>
 8001906:	e007      	b.n	8001918 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190c:	f043 0220 	orr.w	r2, r3, #32
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40012400 	.word	0x40012400
 8001930:	20000018 	.word	0x20000018
 8001934:	431bde83 	.word	0x431bde83

08001938 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b01      	cmp	r3, #1
 8001954:	d040      	beq.n	80019d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001966:	4b1f      	ldr	r3, [pc, #124]	@ (80019e4 <ADC_Enable+0xac>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1f      	ldr	r2, [pc, #124]	@ (80019e8 <ADC_Enable+0xb0>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	0c9b      	lsrs	r3, r3, #18
 8001972:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001974:	e002      	b.n	800197c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	3b01      	subs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001982:	f7ff fbd7 	bl	8001134 <HAL_GetTick>
 8001986:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001988:	e01f      	b.n	80019ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800198a:	f7ff fbd3 	bl	8001134 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d918      	bls.n	80019ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d011      	beq.n	80019ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019aa:	f043 0210 	orr.w	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e007      	b.n	80019da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d1d8      	bne.n	800198a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000018 	.word	0x20000018
 80019e8:	431bde83 	.word	0x431bde83

080019ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d12e      	bne.n	8001a64 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a16:	f7ff fb8d 	bl	8001134 <HAL_GetTick>
 8001a1a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a1c:	e01b      	b.n	8001a56 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a1e:	f7ff fb89 	bl	8001134 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d914      	bls.n	8001a56 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d10d      	bne.n	8001a56 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3e:	f043 0210 	orr.w	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e007      	b.n	8001a66 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d0dc      	beq.n	8001a1e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d127      	bne.n	8001ad8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a9e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001aa2:	d115      	bne.n	8001ad0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d111      	bne.n	8001ad0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d105      	bne.n	8001ad0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f7fe ff49 	bl	8000968 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ad6:	e004      	b.n	8001ae2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff fe0a 	bl	8001712 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	f043 0204 	orr.w	r2, r3, #4
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff fe02 	bl	8001736 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_ADCEx_Calibration_Start+0x1e>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e097      	b.n	8001c8a <HAL_ADCEx_Calibration_Start+0x14e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff42 	bl	80019ec <ADC_ConversionStop_Disable>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fee3 	bl	8001938 <ADC_Enable>
 8001b72:	4603      	mov	r3, r0
 8001b74:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 8081 	bne.w	8001c80 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b86:	f023 0302 	bic.w	r3, r3, #2
 8001b8a:	f043 0202 	orr.w	r2, r3, #2
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b92:	4b40      	ldr	r3, [pc, #256]	@ (8001c94 <HAL_ADCEx_Calibration_Start+0x158>)
 8001b94:	681c      	ldr	r4, [r3, #0]
 8001b96:	2002      	movs	r0, #2
 8001b98:	f001 ff4e 	bl	8003a38 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001ba2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001ba4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001ba6:	e002      	b.n	8001bae <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f9      	bne.n	8001ba8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0208 	orr.w	r2, r2, #8
 8001bc2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001bc4:	f7ff fab6 	bl	8001134 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001bca:	e01b      	b.n	8001c04 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001bcc:	f7ff fab2 	bl	8001134 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b0a      	cmp	r3, #10
 8001bd8:	d914      	bls.n	8001c04 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00d      	beq.n	8001c04 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bec:	f023 0312 	bic.w	r3, r3, #18
 8001bf0:	f043 0210 	orr.w	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e042      	b.n	8001c8a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1dc      	bne.n	8001bcc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0204 	orr.w	r2, r2, #4
 8001c20:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c22:	f7ff fa87 	bl	8001134 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c28:	e01b      	b.n	8001c62 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c2a:	f7ff fa83 	bl	8001134 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b0a      	cmp	r3, #10
 8001c36:	d914      	bls.n	8001c62 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00d      	beq.n	8001c62 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4a:	f023 0312 	bic.w	r3, r3, #18
 8001c4e:	f043 0210 	orr.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e013      	b.n	8001c8a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1dc      	bne.n	8001c2a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c74:	f023 0303 	bic.w	r3, r3, #3
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd90      	pop	{r4, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000018 	.word	0x20000018

08001c98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
	...

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4906      	ldr	r1, [pc, #24]	@ (8001d44 <__NVIC_EnableIRQ+0x34>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff90 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff2d 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff42 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff90 	bl	8001d9c <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff35 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e043      	b.n	8001f66 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <HAL_DMA_Init+0xa8>)
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a22      	ldr	r2, [pc, #136]	@ (8001f74 <HAL_DMA_Init+0xac>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	009a      	lsls	r2, r3, #2
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_DMA_Init+0xb0>)
 8001efa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f12:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	bffdfff8 	.word	0xbffdfff8
 8001f74:	cccccccd 	.word	0xcccccccd
 8001f78:	40020000 	.word	0x40020000

08001f7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_DMA_Start_IT+0x20>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e04b      	b.n	8002034 <HAL_DMA_Start_IT+0xb8>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d13a      	bne.n	8002026 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f9eb 	bl	80023b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 020e 	orr.w	r2, r2, #14
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e00f      	b.n	8002014 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 020a 	orr.w	r2, r2, #10
 8002012:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e005      	b.n	8002032 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800202e:	2302      	movs	r3, #2
 8002030:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002032:	7dfb      	ldrb	r3, [r7, #23]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d008      	beq.n	8002066 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2204      	movs	r2, #4
 8002058:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e020      	b.n	80020a8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 020e 	bic.w	r2, r2, #14
 8002074:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208e:	2101      	movs	r1, #1
 8002090:	fa01 f202 	lsl.w	r2, r1, r2
 8002094:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d005      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2204      	movs	r2, #4
 80020d0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e051      	b.n	800217c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020e 	bic.w	r2, r2, #14
 80020e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a22      	ldr	r2, [pc, #136]	@ (8002188 <HAL_DMA_Abort_IT+0xd4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d029      	beq.n	8002156 <HAL_DMA_Abort_IT+0xa2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a21      	ldr	r2, [pc, #132]	@ (800218c <HAL_DMA_Abort_IT+0xd8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d022      	beq.n	8002152 <HAL_DMA_Abort_IT+0x9e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1f      	ldr	r2, [pc, #124]	@ (8002190 <HAL_DMA_Abort_IT+0xdc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01a      	beq.n	800214c <HAL_DMA_Abort_IT+0x98>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1e      	ldr	r2, [pc, #120]	@ (8002194 <HAL_DMA_Abort_IT+0xe0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d012      	beq.n	8002146 <HAL_DMA_Abort_IT+0x92>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <HAL_DMA_Abort_IT+0xe4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00a      	beq.n	8002140 <HAL_DMA_Abort_IT+0x8c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1b      	ldr	r2, [pc, #108]	@ (800219c <HAL_DMA_Abort_IT+0xe8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d102      	bne.n	800213a <HAL_DMA_Abort_IT+0x86>
 8002134:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002138:	e00e      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 800213a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800213e:	e00b      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002140:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002144:	e008      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002146:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800214a:	e005      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 800214c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002150:	e002      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002152:	2310      	movs	r3, #16
 8002154:	e000      	b.n	8002158 <HAL_DMA_Abort_IT+0xa4>
 8002156:	2301      	movs	r3, #1
 8002158:	4a11      	ldr	r2, [pc, #68]	@ (80021a0 <HAL_DMA_Abort_IT+0xec>)
 800215a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
    } 
  }
  return status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40020008 	.word	0x40020008
 800218c:	4002001c 	.word	0x4002001c
 8002190:	40020030 	.word	0x40020030
 8002194:	40020044 	.word	0x40020044
 8002198:	40020058 	.word	0x40020058
 800219c:	4002006c 	.word	0x4002006c
 80021a0:	40020000 	.word	0x40020000

080021a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	2204      	movs	r2, #4
 80021c2:	409a      	lsls	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d04f      	beq.n	800226c <HAL_DMA_IRQHandler+0xc8>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d04a      	beq.n	800226c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0204 	bic.w	r2, r2, #4
 80021f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a66      	ldr	r2, [pc, #408]	@ (8002394 <HAL_DMA_IRQHandler+0x1f0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d029      	beq.n	8002252 <HAL_DMA_IRQHandler+0xae>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a65      	ldr	r2, [pc, #404]	@ (8002398 <HAL_DMA_IRQHandler+0x1f4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d022      	beq.n	800224e <HAL_DMA_IRQHandler+0xaa>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a63      	ldr	r2, [pc, #396]	@ (800239c <HAL_DMA_IRQHandler+0x1f8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01a      	beq.n	8002248 <HAL_DMA_IRQHandler+0xa4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a62      	ldr	r2, [pc, #392]	@ (80023a0 <HAL_DMA_IRQHandler+0x1fc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d012      	beq.n	8002242 <HAL_DMA_IRQHandler+0x9e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a60      	ldr	r2, [pc, #384]	@ (80023a4 <HAL_DMA_IRQHandler+0x200>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00a      	beq.n	800223c <HAL_DMA_IRQHandler+0x98>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5f      	ldr	r2, [pc, #380]	@ (80023a8 <HAL_DMA_IRQHandler+0x204>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d102      	bne.n	8002236 <HAL_DMA_IRQHandler+0x92>
 8002230:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002234:	e00e      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 8002236:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800223a:	e00b      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 800223c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002240:	e008      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 8002242:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002246:	e005      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 8002248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800224c:	e002      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 800224e:	2340      	movs	r3, #64	@ 0x40
 8002250:	e000      	b.n	8002254 <HAL_DMA_IRQHandler+0xb0>
 8002252:	2304      	movs	r3, #4
 8002254:	4a55      	ldr	r2, [pc, #340]	@ (80023ac <HAL_DMA_IRQHandler+0x208>)
 8002256:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8094 	beq.w	800238a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800226a:	e08e      	b.n	800238a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	2202      	movs	r2, #2
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d056      	beq.n	800232a <HAL_DMA_IRQHandler+0x186>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d051      	beq.n	800232a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 020a 	bic.w	r2, r2, #10
 80022a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a38      	ldr	r2, [pc, #224]	@ (8002394 <HAL_DMA_IRQHandler+0x1f0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d029      	beq.n	800230a <HAL_DMA_IRQHandler+0x166>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a37      	ldr	r2, [pc, #220]	@ (8002398 <HAL_DMA_IRQHandler+0x1f4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d022      	beq.n	8002306 <HAL_DMA_IRQHandler+0x162>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a35      	ldr	r2, [pc, #212]	@ (800239c <HAL_DMA_IRQHandler+0x1f8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01a      	beq.n	8002300 <HAL_DMA_IRQHandler+0x15c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a34      	ldr	r2, [pc, #208]	@ (80023a0 <HAL_DMA_IRQHandler+0x1fc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d012      	beq.n	80022fa <HAL_DMA_IRQHandler+0x156>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a32      	ldr	r2, [pc, #200]	@ (80023a4 <HAL_DMA_IRQHandler+0x200>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00a      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x150>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a31      	ldr	r2, [pc, #196]	@ (80023a8 <HAL_DMA_IRQHandler+0x204>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d102      	bne.n	80022ee <HAL_DMA_IRQHandler+0x14a>
 80022e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80022ec:	e00e      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 80022ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022f2:	e00b      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 80022f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022f8:	e008      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 80022fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022fe:	e005      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 8002300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002304:	e002      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 8002306:	2320      	movs	r3, #32
 8002308:	e000      	b.n	800230c <HAL_DMA_IRQHandler+0x168>
 800230a:	2302      	movs	r3, #2
 800230c:	4a27      	ldr	r2, [pc, #156]	@ (80023ac <HAL_DMA_IRQHandler+0x208>)
 800230e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d034      	beq.n	800238a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002328:	e02f      	b.n	800238a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	2208      	movs	r2, #8
 8002330:	409a      	lsls	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d028      	beq.n	800238c <HAL_DMA_IRQHandler+0x1e8>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d023      	beq.n	800238c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 020e 	bic.w	r2, r2, #14
 8002352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f202 	lsl.w	r2, r1, r2
 8002362:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
    }
  }
  return;
 800238a:	bf00      	nop
 800238c:	bf00      	nop
}
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40020008 	.word	0x40020008
 8002398:	4002001c 	.word	0x4002001c
 800239c:	40020030 	.word	0x40020030
 80023a0:	40020044 	.word	0x40020044
 80023a4:	40020058 	.word	0x40020058
 80023a8:	4002006c 	.word	0x4002006c
 80023ac:	40020000 	.word	0x40020000

080023b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f202 	lsl.w	r2, r1, r2
 80023cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d108      	bne.n	80023f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023ee:	e007      	b.n	8002400 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
	...

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b480      	push	{r7}
 800240e:	b08b      	sub	sp, #44	@ 0x2c
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241e:	e169      	b.n	80026f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002420:	2201      	movs	r2, #1
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8158 	bne.w	80026ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a9a      	ldr	r2, [pc, #616]	@ (80026ac <HAL_GPIO_Init+0x2a0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d05e      	beq.n	8002506 <HAL_GPIO_Init+0xfa>
 8002448:	4a98      	ldr	r2, [pc, #608]	@ (80026ac <HAL_GPIO_Init+0x2a0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d875      	bhi.n	800253a <HAL_GPIO_Init+0x12e>
 800244e:	4a98      	ldr	r2, [pc, #608]	@ (80026b0 <HAL_GPIO_Init+0x2a4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d058      	beq.n	8002506 <HAL_GPIO_Init+0xfa>
 8002454:	4a96      	ldr	r2, [pc, #600]	@ (80026b0 <HAL_GPIO_Init+0x2a4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d86f      	bhi.n	800253a <HAL_GPIO_Init+0x12e>
 800245a:	4a96      	ldr	r2, [pc, #600]	@ (80026b4 <HAL_GPIO_Init+0x2a8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d052      	beq.n	8002506 <HAL_GPIO_Init+0xfa>
 8002460:	4a94      	ldr	r2, [pc, #592]	@ (80026b4 <HAL_GPIO_Init+0x2a8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d869      	bhi.n	800253a <HAL_GPIO_Init+0x12e>
 8002466:	4a94      	ldr	r2, [pc, #592]	@ (80026b8 <HAL_GPIO_Init+0x2ac>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d04c      	beq.n	8002506 <HAL_GPIO_Init+0xfa>
 800246c:	4a92      	ldr	r2, [pc, #584]	@ (80026b8 <HAL_GPIO_Init+0x2ac>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d863      	bhi.n	800253a <HAL_GPIO_Init+0x12e>
 8002472:	4a92      	ldr	r2, [pc, #584]	@ (80026bc <HAL_GPIO_Init+0x2b0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d046      	beq.n	8002506 <HAL_GPIO_Init+0xfa>
 8002478:	4a90      	ldr	r2, [pc, #576]	@ (80026bc <HAL_GPIO_Init+0x2b0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d85d      	bhi.n	800253a <HAL_GPIO_Init+0x12e>
 800247e:	2b12      	cmp	r3, #18
 8002480:	d82a      	bhi.n	80024d8 <HAL_GPIO_Init+0xcc>
 8002482:	2b12      	cmp	r3, #18
 8002484:	d859      	bhi.n	800253a <HAL_GPIO_Init+0x12e>
 8002486:	a201      	add	r2, pc, #4	@ (adr r2, 800248c <HAL_GPIO_Init+0x80>)
 8002488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248c:	08002507 	.word	0x08002507
 8002490:	080024e1 	.word	0x080024e1
 8002494:	080024f3 	.word	0x080024f3
 8002498:	08002535 	.word	0x08002535
 800249c:	0800253b 	.word	0x0800253b
 80024a0:	0800253b 	.word	0x0800253b
 80024a4:	0800253b 	.word	0x0800253b
 80024a8:	0800253b 	.word	0x0800253b
 80024ac:	0800253b 	.word	0x0800253b
 80024b0:	0800253b 	.word	0x0800253b
 80024b4:	0800253b 	.word	0x0800253b
 80024b8:	0800253b 	.word	0x0800253b
 80024bc:	0800253b 	.word	0x0800253b
 80024c0:	0800253b 	.word	0x0800253b
 80024c4:	0800253b 	.word	0x0800253b
 80024c8:	0800253b 	.word	0x0800253b
 80024cc:	0800253b 	.word	0x0800253b
 80024d0:	080024e9 	.word	0x080024e9
 80024d4:	080024fd 	.word	0x080024fd
 80024d8:	4a79      	ldr	r2, [pc, #484]	@ (80026c0 <HAL_GPIO_Init+0x2b4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024de:	e02c      	b.n	800253a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	623b      	str	r3, [r7, #32]
          break;
 80024e6:	e029      	b.n	800253c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	3304      	adds	r3, #4
 80024ee:	623b      	str	r3, [r7, #32]
          break;
 80024f0:	e024      	b.n	800253c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	3308      	adds	r3, #8
 80024f8:	623b      	str	r3, [r7, #32]
          break;
 80024fa:	e01f      	b.n	800253c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	330c      	adds	r3, #12
 8002502:	623b      	str	r3, [r7, #32]
          break;
 8002504:	e01a      	b.n	800253c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800250e:	2304      	movs	r3, #4
 8002510:	623b      	str	r3, [r7, #32]
          break;
 8002512:	e013      	b.n	800253c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800251c:	2308      	movs	r3, #8
 800251e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	611a      	str	r2, [r3, #16]
          break;
 8002526:	e009      	b.n	800253c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002528:	2308      	movs	r3, #8
 800252a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	615a      	str	r2, [r3, #20]
          break;
 8002532:	e003      	b.n	800253c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002534:	2300      	movs	r3, #0
 8002536:	623b      	str	r3, [r7, #32]
          break;
 8002538:	e000      	b.n	800253c <HAL_GPIO_Init+0x130>
          break;
 800253a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2bff      	cmp	r3, #255	@ 0xff
 8002540:	d801      	bhi.n	8002546 <HAL_GPIO_Init+0x13a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	e001      	b.n	800254a <HAL_GPIO_Init+0x13e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3304      	adds	r3, #4
 800254a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2bff      	cmp	r3, #255	@ 0xff
 8002550:	d802      	bhi.n	8002558 <HAL_GPIO_Init+0x14c>
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	e002      	b.n	800255e <HAL_GPIO_Init+0x152>
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	3b08      	subs	r3, #8
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	210f      	movs	r1, #15
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	fa01 f303 	lsl.w	r3, r1, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	401a      	ands	r2, r3
 8002570:	6a39      	ldr	r1, [r7, #32]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	431a      	orrs	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80b1 	beq.w	80026ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800258c:	4b4d      	ldr	r3, [pc, #308]	@ (80026c4 <HAL_GPIO_Init+0x2b8>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	4a4c      	ldr	r2, [pc, #304]	@ (80026c4 <HAL_GPIO_Init+0x2b8>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6193      	str	r3, [r2, #24]
 8002598:	4b4a      	ldr	r3, [pc, #296]	@ (80026c4 <HAL_GPIO_Init+0x2b8>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025a4:	4a48      	ldr	r2, [pc, #288]	@ (80026c8 <HAL_GPIO_Init+0x2bc>)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	220f      	movs	r2, #15
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4013      	ands	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a40      	ldr	r2, [pc, #256]	@ (80026cc <HAL_GPIO_Init+0x2c0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d013      	beq.n	80025f8 <HAL_GPIO_Init+0x1ec>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a3f      	ldr	r2, [pc, #252]	@ (80026d0 <HAL_GPIO_Init+0x2c4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00d      	beq.n	80025f4 <HAL_GPIO_Init+0x1e8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a3e      	ldr	r2, [pc, #248]	@ (80026d4 <HAL_GPIO_Init+0x2c8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d007      	beq.n	80025f0 <HAL_GPIO_Init+0x1e4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3d      	ldr	r2, [pc, #244]	@ (80026d8 <HAL_GPIO_Init+0x2cc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <HAL_GPIO_Init+0x1e0>
 80025e8:	2303      	movs	r3, #3
 80025ea:	e006      	b.n	80025fa <HAL_GPIO_Init+0x1ee>
 80025ec:	2304      	movs	r3, #4
 80025ee:	e004      	b.n	80025fa <HAL_GPIO_Init+0x1ee>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e002      	b.n	80025fa <HAL_GPIO_Init+0x1ee>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_GPIO_Init+0x1ee>
 80025f8:	2300      	movs	r3, #0
 80025fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025fc:	f002 0203 	and.w	r2, r2, #3
 8002600:	0092      	lsls	r2, r2, #2
 8002602:	4093      	lsls	r3, r2
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800260a:	492f      	ldr	r1, [pc, #188]	@ (80026c8 <HAL_GPIO_Init+0x2bc>)
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002624:	4b2d      	ldr	r3, [pc, #180]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	492c      	ldr	r1, [pc, #176]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002632:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	43db      	mvns	r3, r3
 800263a:	4928      	ldr	r1, [pc, #160]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 800263c:	4013      	ands	r3, r2
 800263e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800264c:	4b23      	ldr	r3, [pc, #140]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4922      	ldr	r1, [pc, #136]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	60cb      	str	r3, [r1, #12]
 8002658:	e006      	b.n	8002668 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800265a:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	43db      	mvns	r3, r3
 8002662:	491e      	ldr	r1, [pc, #120]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 8002664:	4013      	ands	r3, r2
 8002666:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002674:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4918      	ldr	r1, [pc, #96]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002682:	4b16      	ldr	r3, [pc, #88]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	43db      	mvns	r3, r3
 800268a:	4914      	ldr	r1, [pc, #80]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 800268c:	4013      	ands	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d021      	beq.n	80026e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800269c:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	490e      	ldr	r1, [pc, #56]	@ (80026dc <HAL_GPIO_Init+0x2d0>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
 80026a8:	e021      	b.n	80026ee <HAL_GPIO_Init+0x2e2>
 80026aa:	bf00      	nop
 80026ac:	10320000 	.word	0x10320000
 80026b0:	10310000 	.word	0x10310000
 80026b4:	10220000 	.word	0x10220000
 80026b8:	10210000 	.word	0x10210000
 80026bc:	10120000 	.word	0x10120000
 80026c0:	10110000 	.word	0x10110000
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40010000 	.word	0x40010000
 80026cc:	40010800 	.word	0x40010800
 80026d0:	40010c00 	.word	0x40010c00
 80026d4:	40011000 	.word	0x40011000
 80026d8:	40011400 	.word	0x40011400
 80026dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <HAL_GPIO_Init+0x304>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	4909      	ldr	r1, [pc, #36]	@ (8002710 <HAL_GPIO_Init+0x304>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	3301      	adds	r3, #1
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	fa22 f303 	lsr.w	r3, r2, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f47f ae8e 	bne.w	8002420 <HAL_GPIO_Init+0x14>
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	372c      	adds	r7, #44	@ 0x2c
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	40010400 	.word	0x40010400

08002714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e001      	b.n	8002736 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	807b      	strh	r3, [r7, #2]
 800274e:	4613      	mov	r3, r2
 8002750:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002752:	787b      	ldrb	r3, [r7, #1]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002758:	887a      	ldrh	r2, [r7, #2]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800275e:	e003      	b.n	8002768 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	041a      	lsls	r2, r3, #16
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	611a      	str	r2, [r3, #16]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
	...

08002774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e12b      	b.n	80029de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe f9da 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	@ 0x24
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d8:	f001 f832 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 80027dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4a81      	ldr	r2, [pc, #516]	@ (80029e8 <HAL_I2C_Init+0x274>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d807      	bhi.n	80027f8 <HAL_I2C_Init+0x84>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a80      	ldr	r2, [pc, #512]	@ (80029ec <HAL_I2C_Init+0x278>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bf94      	ite	ls
 80027f0:	2301      	movls	r3, #1
 80027f2:	2300      	movhi	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e006      	b.n	8002806 <HAL_I2C_Init+0x92>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a7d      	ldr	r2, [pc, #500]	@ (80029f0 <HAL_I2C_Init+0x27c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bf94      	ite	ls
 8002800:	2301      	movls	r3, #1
 8002802:	2300      	movhi	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0e7      	b.n	80029de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a78      	ldr	r2, [pc, #480]	@ (80029f4 <HAL_I2C_Init+0x280>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0c9b      	lsrs	r3, r3, #18
 8002818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a6a      	ldr	r2, [pc, #424]	@ (80029e8 <HAL_I2C_Init+0x274>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d802      	bhi.n	8002848 <HAL_I2C_Init+0xd4>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3301      	adds	r3, #1
 8002846:	e009      	b.n	800285c <HAL_I2C_Init+0xe8>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	4a69      	ldr	r2, [pc, #420]	@ (80029f8 <HAL_I2C_Init+0x284>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	099b      	lsrs	r3, r3, #6
 800285a:	3301      	adds	r3, #1
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	430b      	orrs	r3, r1
 8002862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800286e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	495c      	ldr	r1, [pc, #368]	@ (80029e8 <HAL_I2C_Init+0x274>)
 8002878:	428b      	cmp	r3, r1
 800287a:	d819      	bhi.n	80028b0 <HAL_I2C_Init+0x13c>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1e59      	subs	r1, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fbb1 f3f3 	udiv	r3, r1, r3
 800288a:	1c59      	adds	r1, r3, #1
 800288c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002890:	400b      	ands	r3, r1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_I2C_Init+0x138>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1e59      	subs	r1, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028aa:	e051      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 80028ac:	2304      	movs	r3, #4
 80028ae:	e04f      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d111      	bne.n	80028dc <HAL_I2C_Init+0x168>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e012      	b.n	8002902 <HAL_I2C_Init+0x18e>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e58      	subs	r0, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	0099      	lsls	r1, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Init+0x196>
 8002906:	2301      	movs	r3, #1
 8002908:	e022      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10e      	bne.n	8002930 <HAL_I2C_Init+0x1bc>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1e58      	subs	r0, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	440b      	add	r3, r1
 8002920:	fbb0 f3f3 	udiv	r3, r0, r3
 8002924:	3301      	adds	r3, #1
 8002926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800292e:	e00f      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e58      	subs	r0, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	0099      	lsls	r1, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	fbb0 f3f3 	udiv	r3, r0, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	6809      	ldr	r1, [r1, #0]
 8002954:	4313      	orrs	r3, r2
 8002956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800297e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6911      	ldr	r1, [r2, #16]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68d2      	ldr	r2, [r2, #12]
 800298a:	4311      	orrs	r1, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	430b      	orrs	r3, r1
 8002992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	000186a0 	.word	0x000186a0
 80029ec:	001e847f 	.word	0x001e847f
 80029f0:	003d08ff 	.word	0x003d08ff
 80029f4:	431bde83 	.word	0x431bde83
 80029f8:	10624dd3 	.word	0x10624dd3

080029fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	461a      	mov	r2, r3
 8002a08:	460b      	mov	r3, r1
 8002a0a:	817b      	strh	r3, [r7, #10]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7fe fb90 	bl	8001134 <HAL_GetTick>
 8002a14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	f040 80e0 	bne.w	8002be4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2319      	movs	r3, #25
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4970      	ldr	r1, [pc, #448]	@ (8002bf0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f964 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e0d3      	b.n	8002be6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_I2C_Master_Transmit+0x50>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e0cc      	b.n	8002be6 <HAL_I2C_Master_Transmit+0x1ea>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d007      	beq.n	8002a72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2221      	movs	r2, #33	@ 0x21
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	893a      	ldrh	r2, [r7, #8]
 8002aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a50      	ldr	r2, [pc, #320]	@ (8002bf4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ab4:	8979      	ldrh	r1, [r7, #10]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f89c 	bl	8002bf8 <I2C_MasterRequestWrite>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e08d      	b.n	8002be6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ae0:	e066      	b.n	8002bb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	6a39      	ldr	r1, [r7, #32]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fa22 	bl	8002f30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00d      	beq.n	8002b0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d107      	bne.n	8002b0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e06b      	b.n	8002be6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	781a      	ldrb	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d11b      	bne.n	8002b84 <HAL_I2C_Master_Transmit+0x188>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d017      	beq.n	8002b84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	6a39      	ldr	r1, [r7, #32]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fa19 	bl	8002fc0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d107      	bne.n	8002bac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002baa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e01a      	b.n	8002be6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d194      	bne.n	8002ae2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	00100002 	.word	0x00100002
 8002bf4:	ffff0000 	.word	0xffff0000

08002bf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	460b      	mov	r3, r1
 8002c06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d006      	beq.n	8002c22 <I2C_MasterRequestWrite+0x2a>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d003      	beq.n	8002c22 <I2C_MasterRequestWrite+0x2a>
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c20:	d108      	bne.n	8002c34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e00b      	b.n	8002c4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c38:	2b12      	cmp	r3, #18
 8002c3a:	d107      	bne.n	8002c4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f84f 	bl	8002cfc <I2C_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c72:	d103      	bne.n	8002c7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e035      	b.n	8002cec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c88:	d108      	bne.n	8002c9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c8a:	897b      	ldrh	r3, [r7, #10]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c98:	611a      	str	r2, [r3, #16]
 8002c9a:	e01b      	b.n	8002cd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c9c:	897b      	ldrh	r3, [r7, #10]
 8002c9e:	11db      	asrs	r3, r3, #7
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f003 0306 	and.w	r3, r3, #6
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f063 030f 	orn	r3, r3, #15
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	490e      	ldr	r1, [pc, #56]	@ (8002cf4 <I2C_MasterRequestWrite+0xfc>)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f898 	bl	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e010      	b.n	8002cec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cca:	897b      	ldrh	r3, [r7, #10]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4907      	ldr	r1, [pc, #28]	@ (8002cf8 <I2C_MasterRequestWrite+0x100>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f888 	bl	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	00010008 	.word	0x00010008
 8002cf8:	00010002 	.word	0x00010002

08002cfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d0c:	e048      	b.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d044      	beq.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7fe fa0d 	bl	8001134 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d139      	bne.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	0c1b      	lsrs	r3, r3, #16
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d10d      	bne.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	e00c      	b.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	43da      	mvns	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d116      	bne.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e023      	b.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	0c1b      	lsrs	r3, r3, #16
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d10d      	bne.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	43da      	mvns	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4013      	ands	r3, r2
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	e00c      	b.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d093      	beq.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dfe:	e071      	b.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e0e:	d123      	bne.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e067      	b.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d041      	beq.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e60:	f7fe f968 	bl	8001134 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d302      	bcc.n	8002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d136      	bne.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10c      	bne.n	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf14      	ite	ne
 8002e92:	2301      	movne	r3, #1
 8002e94:	2300      	moveq	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	e00b      	b.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e021      	b.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	0c1b      	lsrs	r3, r3, #16
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d10c      	bne.n	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	43da      	mvns	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e00b      	b.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f47f af6d 	bne.w	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3c:	e034      	b.n	8002fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f886 	bl	8003050 <I2C_IsAcknowledgeFailed>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e034      	b.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d028      	beq.n	8002fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fe f8ed 	bl	8001134 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d11d      	bne.n	8002fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f76:	2b80      	cmp	r3, #128	@ 0x80
 8002f78:	d016      	beq.n	8002fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e007      	b.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb2:	2b80      	cmp	r3, #128	@ 0x80
 8002fb4:	d1c3      	bne.n	8002f3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fcc:	e034      	b.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f83e 	bl	8003050 <I2C_IsAcknowledgeFailed>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e034      	b.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d028      	beq.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fe f8a5 	bl	8001134 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11d      	bne.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b04      	cmp	r3, #4
 8003008:	d016      	beq.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e007      	b.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d1c3      	bne.n	8002fce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003066:	d11b      	bne.n	80030a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003070:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	f043 0204 	orr.w	r2, r3, #4
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e272      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8087 	beq.w	80031da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030cc:	4b92      	ldr	r3, [pc, #584]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d00c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030d8:	4b8f      	ldr	r3, [pc, #572]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d112      	bne.n	800310a <HAL_RCC_OscConfig+0x5e>
 80030e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f0:	d10b      	bne.n	800310a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f2:	4b89      	ldr	r3, [pc, #548]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d06c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x12c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d168      	bne.n	80031d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e24c      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x76>
 8003114:	4b80      	ldr	r3, [pc, #512]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a7f      	ldr	r2, [pc, #508]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e02e      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x98>
 800312a:	4b7b      	ldr	r3, [pc, #492]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7a      	ldr	r2, [pc, #488]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b78      	ldr	r3, [pc, #480]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a77      	ldr	r2, [pc, #476]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800313c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0xbc>
 800314e:	4b72      	ldr	r3, [pc, #456]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a71      	ldr	r2, [pc, #452]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b6f      	ldr	r3, [pc, #444]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6e      	ldr	r2, [pc, #440]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003168:	4b6b      	ldr	r3, [pc, #428]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a6a      	ldr	r2, [pc, #424]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b68      	ldr	r3, [pc, #416]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a67      	ldr	r2, [pc, #412]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800317e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fd ffd4 	bl	8001134 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003190:	f7fd ffd0 	bl	8001134 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	@ 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e200      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xe4>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fd ffc0 	bl	8001134 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fd ffbc 	bl	8001134 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	@ 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e1ec      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	4b53      	ldr	r3, [pc, #332]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x10c>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d063      	beq.n	80032ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e6:	4b4c      	ldr	r3, [pc, #304]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031f2:	4b49      	ldr	r3, [pc, #292]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d11c      	bne.n	8003238 <HAL_RCC_OscConfig+0x18c>
 80031fe:	4b46      	ldr	r3, [pc, #280]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d116      	bne.n	8003238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	4b43      	ldr	r3, [pc, #268]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x176>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e1c0      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b3d      	ldr	r3, [pc, #244]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4939      	ldr	r1, [pc, #228]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	e03a      	b.n	80032ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003240:	4b36      	ldr	r3, [pc, #216]	@ (800331c <HAL_RCC_OscConfig+0x270>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7fd ff75 	bl	8001134 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324e:	f7fd ff71 	bl	8001134 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e1a1      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	4b2d      	ldr	r3, [pc, #180]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	4b2a      	ldr	r3, [pc, #168]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4927      	ldr	r1, [pc, #156]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
 8003280:	e015      	b.n	80032ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003282:	4b26      	ldr	r3, [pc, #152]	@ (800331c <HAL_RCC_OscConfig+0x270>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd ff54 	bl	8001134 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003290:	f7fd ff50 	bl	8001134 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e180      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d03a      	beq.n	8003330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d019      	beq.n	80032f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c2:	4b17      	ldr	r3, [pc, #92]	@ (8003320 <HAL_RCC_OscConfig+0x274>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c8:	f7fd ff34 	bl	8001134 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fd ff30 	bl	8001134 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e160      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f000 face 	bl	8003890 <RCC_Delay>
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <HAL_RCC_OscConfig+0x274>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fc:	f7fd ff1a 	bl	8001134 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003302:	e00f      	b.n	8003324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003304:	f7fd ff16 	bl	8001134 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d908      	bls.n	8003324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e146      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	42420000 	.word	0x42420000
 8003320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003324:	4b92      	ldr	r3, [pc, #584]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e9      	bne.n	8003304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80a6 	beq.w	800348a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003342:	4b8b      	ldr	r3, [pc, #556]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10d      	bne.n	800336a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	4b88      	ldr	r3, [pc, #544]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	4a87      	ldr	r2, [pc, #540]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003358:	61d3      	str	r3, [r2, #28]
 800335a:	4b85      	ldr	r3, [pc, #532]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b82      	ldr	r3, [pc, #520]	@ (8003574 <HAL_RCC_OscConfig+0x4c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d118      	bne.n	80033a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b7f      	ldr	r3, [pc, #508]	@ (8003574 <HAL_RCC_OscConfig+0x4c8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7e      	ldr	r2, [pc, #504]	@ (8003574 <HAL_RCC_OscConfig+0x4c8>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7fd fed7 	bl	8001134 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7fd fed3 	bl	8001134 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b64      	cmp	r3, #100	@ 0x64
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e103      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	4b75      	ldr	r3, [pc, #468]	@ (8003574 <HAL_RCC_OscConfig+0x4c8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x312>
 80033b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6213      	str	r3, [r2, #32]
 80033bc:	e02d      	b.n	800341a <HAL_RCC_OscConfig+0x36e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x334>
 80033c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4a69      	ldr	r2, [pc, #420]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6213      	str	r3, [r2, #32]
 80033d2:	4b67      	ldr	r3, [pc, #412]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4a66      	ldr	r2, [pc, #408]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	f023 0304 	bic.w	r3, r3, #4
 80033dc:	6213      	str	r3, [r2, #32]
 80033de:	e01c      	b.n	800341a <HAL_RCC_OscConfig+0x36e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d10c      	bne.n	8003402 <HAL_RCC_OscConfig+0x356>
 80033e8:	4b61      	ldr	r3, [pc, #388]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4a60      	ldr	r2, [pc, #384]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	f043 0304 	orr.w	r3, r3, #4
 80033f2:	6213      	str	r3, [r2, #32]
 80033f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6213      	str	r3, [r2, #32]
 8003400:	e00b      	b.n	800341a <HAL_RCC_OscConfig+0x36e>
 8003402:	4b5b      	ldr	r3, [pc, #364]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a5a      	ldr	r2, [pc, #360]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6213      	str	r3, [r2, #32]
 800340e:	4b58      	ldr	r3, [pc, #352]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	4a57      	ldr	r2, [pc, #348]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d015      	beq.n	800344e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7fd fe87 	bl	8001134 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fd fe83 	bl	8001134 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e0b1      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	4b4b      	ldr	r3, [pc, #300]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ee      	beq.n	800342a <HAL_RCC_OscConfig+0x37e>
 800344c:	e014      	b.n	8003478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fd fe71 	bl	8001134 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fd fe6d 	bl	8001134 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e09b      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346c:	4b40      	ldr	r3, [pc, #256]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ee      	bne.n	8003456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d105      	bne.n	800348a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347e:	4b3c      	ldr	r3, [pc, #240]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4a3b      	ldr	r2, [pc, #236]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8087 	beq.w	80035a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003494:	4b36      	ldr	r3, [pc, #216]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d061      	beq.n	8003564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d146      	bne.n	8003536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a8:	4b33      	ldr	r3, [pc, #204]	@ (8003578 <HAL_RCC_OscConfig+0x4cc>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fd fe41 	bl	8001134 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fd fe3d 	bl	8001134 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e06d      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c8:	4b29      	ldr	r3, [pc, #164]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034dc:	d108      	bne.n	80034f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034de:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4921      	ldr	r1, [pc, #132]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a19      	ldr	r1, [r3, #32]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	430b      	orrs	r3, r1
 8003502:	491b      	ldr	r1, [pc, #108]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003508:	4b1b      	ldr	r3, [pc, #108]	@ (8003578 <HAL_RCC_OscConfig+0x4cc>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fd fe11 	bl	8001134 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003516:	f7fd fe0d 	bl	8001134 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e03d      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003528:	4b11      	ldr	r3, [pc, #68]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x46a>
 8003534:	e035      	b.n	80035a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003536:	4b10      	ldr	r3, [pc, #64]	@ (8003578 <HAL_RCC_OscConfig+0x4cc>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fd fdfa 	bl	8001134 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003544:	f7fd fdf6 	bl	8001134 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e026      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x498>
 8003562:	e01e      	b.n	80035a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d107      	bne.n	800357c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e019      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800357c:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <HAL_RCC_OscConfig+0x500>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	429a      	cmp	r2, r3
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0d0      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b67      	ldr	r3, [pc, #412]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 0207 	bic.w	r2, r3, #7
 80035da:	4965      	ldr	r1, [pc, #404]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b63      	ldr	r3, [pc, #396]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0b8      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800360c:	4b59      	ldr	r3, [pc, #356]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a58      	ldr	r2, [pc, #352]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003616:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003624:	4b53      	ldr	r3, [pc, #332]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a52      	ldr	r2, [pc, #328]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800362e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b50      	ldr	r3, [pc, #320]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	494d      	ldr	r1, [pc, #308]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	4313      	orrs	r3, r2
 8003640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d040      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b47      	ldr	r3, [pc, #284]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d115      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e07f      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	4b41      	ldr	r3, [pc, #260]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e073      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	4b3d      	ldr	r3, [pc, #244]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06b      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	4b39      	ldr	r3, [pc, #228]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4936      	ldr	r1, [pc, #216]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a0:	f7fd fd48 	bl	8001134 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fd fd44 	bl	8001134 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e053      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	4b2d      	ldr	r3, [pc, #180]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 020c 	and.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1eb      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d210      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 0207 	bic.w	r2, r3, #7
 80036e6:	4922      	ldr	r1, [pc, #136]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e032      	b.n	8003766 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4916      	ldr	r1, [pc, #88]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800372a:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	490e      	ldr	r1, [pc, #56]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373e:	f000 f821 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003742:	4602      	mov	r2, r0
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	490a      	ldr	r1, [pc, #40]	@ (8003778 <HAL_RCC_ClockConfig+0x1c8>)
 8003750:	5ccb      	ldrb	r3, [r1, r3]
 8003752:	fa22 f303 	lsr.w	r3, r2, r3
 8003756:	4a09      	ldr	r2, [pc, #36]	@ (800377c <HAL_RCC_ClockConfig+0x1cc>)
 8003758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800375a:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <HAL_RCC_ClockConfig+0x1d0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fca6 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40022000 	.word	0x40022000
 8003774:	40021000 	.word	0x40021000
 8003778:	08005700 	.word	0x08005700
 800377c:	20000018 	.word	0x20000018
 8003780:	2000001c 	.word	0x2000001c

08003784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800379e:	4b1e      	ldr	r3, [pc, #120]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x94>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x30>
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x36>
 80037b2:	e027      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037b4:	4b19      	ldr	r3, [pc, #100]	@ (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 80037b6:	613b      	str	r3, [r7, #16]
      break;
 80037b8:	e027      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0c9b      	lsrs	r3, r3, #18
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	4a17      	ldr	r2, [pc, #92]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037c4:	5cd3      	ldrb	r3, [r2, r3]
 80037c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d010      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037d2:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x94>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	0c5b      	lsrs	r3, r3, #17
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	4a11      	ldr	r2, [pc, #68]	@ (8003824 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	@ (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 80037e6:	fb03 f202 	mul.w	r2, r3, r2
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	e004      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003828 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	613b      	str	r3, [r7, #16]
      break;
 8003802:	e002      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_RCC_GetSysClockFreq+0x98>)
 8003806:	613b      	str	r3, [r7, #16]
      break;
 8003808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380a:	693b      	ldr	r3, [r7, #16]
}
 800380c:	4618      	mov	r0, r3
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	007a1200 	.word	0x007a1200
 8003820:	08005718 	.word	0x08005718
 8003824:	08005728 	.word	0x08005728
 8003828:	003d0900 	.word	0x003d0900

0800382c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003830:	4b02      	ldr	r3, [pc, #8]	@ (800383c <HAL_RCC_GetHCLKFreq+0x10>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	20000018 	.word	0x20000018

08003840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003844:	f7ff fff2 	bl	800382c <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4903      	ldr	r1, [pc, #12]	@ (8003864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000
 8003864:	08005710 	.word	0x08005710

08003868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800386c:	f7ff ffde 	bl	800382c <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	0adb      	lsrs	r3, r3, #11
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	@ (800388c <HAL_RCC_GetPCLK2Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	08005710 	.word	0x08005710

08003890 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003898:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <RCC_Delay+0x34>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0a      	ldr	r2, [pc, #40]	@ (80038c8 <RCC_Delay+0x38>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	0a5b      	lsrs	r3, r3, #9
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038ac:	bf00      	nop
  }
  while (Delay --);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e5a      	subs	r2, r3, #1
 80038b2:	60fa      	str	r2, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f9      	bne.n	80038ac <RCC_Delay+0x1c>
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	20000018 	.word	0x20000018
 80038c8:	10624dd3 	.word	0x10624dd3

080038cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d07d      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038e8:	2300      	movs	r3, #0
 80038ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ec:	4b4f      	ldr	r3, [pc, #316]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10d      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f8:	4b4c      	ldr	r3, [pc, #304]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	4a4b      	ldr	r2, [pc, #300]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003902:	61d3      	str	r3, [r2, #28]
 8003904:	4b49      	ldr	r3, [pc, #292]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003910:	2301      	movs	r3, #1
 8003912:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	4b46      	ldr	r3, [pc, #280]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d118      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003920:	4b43      	ldr	r3, [pc, #268]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a42      	ldr	r2, [pc, #264]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800392a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392c:	f7fd fc02 	bl	8001134 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003932:	e008      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003934:	f7fd fbfe 	bl	8001134 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	@ 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e06d      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003946:	4b3a      	ldr	r3, [pc, #232]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003952:	4b36      	ldr	r3, [pc, #216]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d02e      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	429a      	cmp	r2, r3
 800396e:	d027      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003970:	4b2e      	ldr	r3, [pc, #184]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003978:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800397a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003980:	4b2c      	ldr	r3, [pc, #176]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003986:	4a29      	ldr	r2, [pc, #164]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d014      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7fd fbcd 	bl	8001134 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399c:	e00a      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fd fbc9 	bl	8001134 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e036      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ee      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4917      	ldr	r1, [pc, #92]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d105      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d8:	4b14      	ldr	r3, [pc, #80]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	4a13      	ldr	r2, [pc, #76]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039f0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	490b      	ldr	r1, [pc, #44]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a0e:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4904      	ldr	r1, [pc, #16]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40007000 	.word	0x40007000
 8003a34:	42420440 	.word	0x42420440

08003a38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	f200 808a 	bhi.w	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d045      	beq.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d075      	beq.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003a6e:	e082      	b.n	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003a70:	4b46      	ldr	r3, [pc, #280]	@ (8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a76:	4b45      	ldr	r3, [pc, #276]	@ (8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d07b      	beq.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	0c9b      	lsrs	r3, r3, #18
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	4a41      	ldr	r2, [pc, #260]	@ (8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003a8c:	5cd3      	ldrb	r3, [r2, r3]
 8003a8e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d015      	beq.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a9a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	0c5b      	lsrs	r3, r3, #17
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	4a3b      	ldr	r2, [pc, #236]	@ (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003aa6:	5cd3      	ldrb	r3, [r2, r3]
 8003aa8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ab4:	4a38      	ldr	r2, [pc, #224]	@ (8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	e004      	b.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4a34      	ldr	r2, [pc, #208]	@ (8003b9c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003adc:	d102      	bne.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	61bb      	str	r3, [r7, #24]
      break;
 8003ae2:	e04a      	b.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	61bb      	str	r3, [r7, #24]
      break;
 8003af2:	e042      	b.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003af4:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b04:	d108      	bne.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003b10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	e01f      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b22:	d109      	bne.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003b24:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003b30:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	e00f      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b42:	d11c      	bne.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003b44:	4b11      	ldr	r3, [pc, #68]	@ (8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d016      	beq.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003b50:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003b54:	61bb      	str	r3, [r7, #24]
      break;
 8003b56:	e012      	b.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003b58:	e011      	b.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003b5a:	f7ff fe85 	bl	8003868 <HAL_RCC_GetPCLK2Freq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0b9b      	lsrs	r3, r3, #14
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	61bb      	str	r3, [r7, #24]
      break;
 8003b74:	e004      	b.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b76:	bf00      	nop
 8003b78:	e002      	b.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b7e:	bf00      	nop
    }
  }
  return (frequency);
 8003b80:	69bb      	ldr	r3, [r7, #24]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	0800572c 	.word	0x0800572c
 8003b94:	0800573c 	.word	0x0800573c
 8003b98:	007a1200 	.word	0x007a1200
 8003b9c:	003d0900 	.word	0x003d0900
 8003ba0:	aaaaaaab 	.word	0xaaaaaaab

08003ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e042      	b.n	8003c3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd f812 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	@ 0x24
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fdbb 	bl	8004764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08c      	sub	sp, #48	@ 0x30
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d156      	bne.n	8003d0c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_UART_Transmit_DMA+0x26>
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e04f      	b.n	8003d0e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	88fa      	ldrh	r2, [r7, #6]
 8003c78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2221      	movs	r2, #33	@ 0x21
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c92:	4a21      	ldr	r2, [pc, #132]	@ (8003d18 <HAL_UART_Transmit_DMA+0xd4>)
 8003c94:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9a:	4a20      	ldr	r2, [pc, #128]	@ (8003d1c <HAL_UART_Transmit_DMA+0xd8>)
 8003c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d20 <HAL_UART_Transmit_DMA+0xdc>)
 8003ca4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003caa:	2200      	movs	r2, #0
 8003cac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003cae:	f107 0308 	add.w	r3, r7, #8
 8003cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cba:	6819      	ldr	r1, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	f7fe f959 	bl	8001f7c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3314      	adds	r3, #20
 8003cf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cf6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6a39      	ldr	r1, [r7, #32]
 8003cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e5      	bne.n	8003cd4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e000      	b.n	8003d0e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003d0c:	2302      	movs	r3, #2
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3730      	adds	r7, #48	@ 0x30
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	08004295 	.word	0x08004295
 8003d1c:	0800432f 	.word	0x0800432f
 8003d20:	0800434b 	.word	0x0800434b

08003d24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b0ba      	sub	sp, #232	@ 0xe8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10f      	bne.n	8003d8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_UART_IRQHandler+0x66>
 8003d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fc2f 	bl	80045e6 <UART_Receive_IT>
      return;
 8003d88:	e25b      	b.n	8004242 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80de 	beq.w	8003f50 <HAL_UART_IRQHandler+0x22c>
 8003d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003da4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80d1 	beq.w	8003f50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <HAL_UART_IRQHandler+0xae>
 8003dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	f043 0201 	orr.w	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_UART_IRQHandler+0xd2>
 8003dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	f043 0202 	orr.w	r2, r3, #2
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <HAL_UART_IRQHandler+0xf6>
 8003e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	f043 0204 	orr.w	r2, r3, #4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d011      	beq.n	8003e4a <HAL_UART_IRQHandler+0x126>
 8003e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d105      	bne.n	8003e3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e42:	f043 0208 	orr.w	r2, r3, #8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 81f2 	beq.w	8004238 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_UART_IRQHandler+0x14e>
 8003e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fbba 	bl	80045e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d103      	bne.n	8003e9e <HAL_UART_IRQHandler+0x17a>
 8003e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d04f      	beq.n	8003f3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fac4 	bl	800442c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d041      	beq.n	8003f36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3314      	adds	r3, #20
 8003eb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3314      	adds	r3, #20
 8003eda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ede:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003eea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1d9      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d013      	beq.n	8003f2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004104 <HAL_UART_IRQHandler+0x3e0>)
 8003f0c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe f8ce 	bl	80020b4 <HAL_DMA_Abort_IT>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d016      	beq.n	8003f4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	e00e      	b.n	8003f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f99c 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	e00a      	b.n	8003f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f998 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3c:	e006      	b.n	8003f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f994 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f4a:	e175      	b.n	8004238 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	bf00      	nop
    return;
 8003f4e:	e173      	b.n	8004238 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	f040 814f 	bne.w	80041f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8148 	beq.w	80041f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8141 	beq.w	80041f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80b6 	beq.w	8004108 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8145 	beq.w	800423c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	f080 813e 	bcs.w	800423c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	f000 8088 	beq.w	80040e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004000:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004004:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800400c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004018:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1d9      	bne.n	8003fd4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3314      	adds	r3, #20
 8004026:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004030:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3314      	adds	r3, #20
 8004040:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004044:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004048:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800404c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004056:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e1      	bne.n	8004020 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3314      	adds	r3, #20
 8004062:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800406c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800406e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004072:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3314      	adds	r3, #20
 800407c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004080:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004082:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004086:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800408e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e3      	bne.n	800405c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040b4:	f023 0310 	bic.w	r3, r3, #16
 80040b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e3      	bne.n	80040a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fd ffac 	bl	800203c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8bf 	bl	800427e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004100:	e09c      	b.n	800423c <HAL_UART_IRQHandler+0x518>
 8004102:	bf00      	nop
 8004104:	080044f1 	.word	0x080044f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004110:	b29b      	uxth	r3, r3
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 808e 	beq.w	8004240 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8089 	beq.w	8004240 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	330c      	adds	r3, #12
 8004134:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800413e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004144:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004152:	647a      	str	r2, [r7, #68]	@ 0x44
 8004154:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004158:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e3      	bne.n	800412e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	623b      	str	r3, [r7, #32]
   return(result);
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3314      	adds	r3, #20
 8004186:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800418a:	633a      	str	r2, [r7, #48]	@ 0x30
 800418c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e3      	bne.n	8004166 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0310 	bic.w	r3, r3, #16
 80041c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80041d0:	61fa      	str	r2, [r7, #28]
 80041d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	69b9      	ldr	r1, [r7, #24]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	617b      	str	r3, [r7, #20]
   return(result);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e3      	bne.n	80041ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041ee:	4619      	mov	r1, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f844 	bl	800427e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041f6:	e023      	b.n	8004240 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d009      	beq.n	8004218 <HAL_UART_IRQHandler+0x4f4>
 8004204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f981 	bl	8004518 <UART_Transmit_IT>
    return;
 8004216:	e014      	b.n	8004242 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00e      	beq.n	8004242 <HAL_UART_IRQHandler+0x51e>
 8004224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f9c0 	bl	80045b6 <UART_EndTransmit_IT>
    return;
 8004236:	e004      	b.n	8004242 <HAL_UART_IRQHandler+0x51e>
    return;
 8004238:	bf00      	nop
 800423a:	e002      	b.n	8004242 <HAL_UART_IRQHandler+0x51e>
      return;
 800423c:	bf00      	nop
 800423e:	e000      	b.n	8004242 <HAL_UART_IRQHandler+0x51e>
      return;
 8004240:	bf00      	nop
  }
}
 8004242:	37e8      	adds	r7, #232	@ 0xe8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	460b      	mov	r3, r1
 8004288:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b090      	sub	sp, #64	@ 0x40
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d137      	bne.n	8004320 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80042b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042b2:	2200      	movs	r2, #0
 80042b4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3314      	adds	r3, #20
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	623b      	str	r3, [r7, #32]
   return(result);
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3314      	adds	r3, #20
 80042d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80042d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e5      	bne.n	80042b6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004300:	637b      	str	r3, [r7, #52]	@ 0x34
 8004302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800430a:	61fa      	str	r2, [r7, #28]
 800430c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	69b9      	ldr	r1, [r7, #24]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	617b      	str	r3, [r7, #20]
   return(result);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e5      	bne.n	80042ea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800431e:	e002      	b.n	8004326 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004320:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004322:	f7fc fb33 	bl	800098c <HAL_UART_TxCpltCallback>
}
 8004326:	bf00      	nop
 8004328:	3740      	adds	r7, #64	@ 0x40
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff ff83 	bl	8004248 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b21      	cmp	r3, #33	@ 0x21
 800437c:	d108      	bne.n	8004390 <UART_DMAError+0x46>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2200      	movs	r2, #0
 8004388:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800438a:	68b8      	ldr	r0, [r7, #8]
 800438c:	f000 f827 	bl	80043de <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b22      	cmp	r3, #34	@ 0x22
 80043b0:	d108      	bne.n	80043c4 <UART_DMAError+0x7a>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2200      	movs	r2, #0
 80043bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80043be:	68b8      	ldr	r0, [r7, #8]
 80043c0:	f000 f834 	bl	800442c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c8:	f043 0210 	orr.w	r2, r3, #16
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043d0:	68b8      	ldr	r0, [r7, #8]
 80043d2:	f7ff ff4b 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043de:	b480      	push	{r7}
 80043e0:	b089      	sub	sp, #36	@ 0x24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	61ba      	str	r2, [r7, #24]
 8004408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	6979      	ldr	r1, [r7, #20]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	613b      	str	r3, [r7, #16]
   return(result);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e5      	bne.n	80043e6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004422:	bf00      	nop
 8004424:	3724      	adds	r7, #36	@ 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b095      	sub	sp, #84	@ 0x54
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004446:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800444a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004454:	643a      	str	r2, [r7, #64]	@ 0x40
 8004456:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800445a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e5      	bne.n	8004434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3314      	adds	r3, #20
 800446e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	61fb      	str	r3, [r7, #28]
   return(result);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3314      	adds	r3, #20
 8004486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004488:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800448a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800448e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e5      	bne.n	8004468 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d119      	bne.n	80044d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f023 0310 	bic.w	r3, r3, #16
 80044ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044c4:	61ba      	str	r2, [r7, #24]
 80044c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6979      	ldr	r1, [r7, #20]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	613b      	str	r3, [r7, #16]
   return(result);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e5      	bne.n	80044a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044e6:	bf00      	nop
 80044e8:	3754      	adds	r7, #84	@ 0x54
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff feae 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b21      	cmp	r3, #33	@ 0x21
 800452a:	d13e      	bne.n	80045aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004534:	d114      	bne.n	8004560 <UART_Transmit_IT+0x48>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d110      	bne.n	8004560 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004552:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	1c9a      	adds	r2, r3, #2
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	621a      	str	r2, [r3, #32]
 800455e:	e008      	b.n	8004572 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	1c59      	adds	r1, r3, #1
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6211      	str	r1, [r2, #32]
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29b      	uxth	r3, r3
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	4619      	mov	r1, r3
 8004580:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10f      	bne.n	80045a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004594:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e000      	b.n	80045ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
  }
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc f9d8 	bl	800098c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b08c      	sub	sp, #48	@ 0x30
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b22      	cmp	r3, #34	@ 0x22
 80045f8:	f040 80ae 	bne.w	8004758 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004604:	d117      	bne.n	8004636 <UART_Receive_IT+0x50>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d113      	bne.n	8004636 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004624:	b29a      	uxth	r2, r3
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462e:	1c9a      	adds	r2, r3, #2
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	629a      	str	r2, [r3, #40]	@ 0x28
 8004634:	e026      	b.n	8004684 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004648:	d007      	beq.n	800465a <UART_Receive_IT+0x74>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <UART_Receive_IT+0x82>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	e008      	b.n	800467a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004674:	b2da      	uxtb	r2, r3
 8004676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004678:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29b      	uxth	r3, r3
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4619      	mov	r1, r3
 8004692:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004694:	2b00      	cmp	r3, #0
 8004696:	d15d      	bne.n	8004754 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0220 	bic.w	r2, r2, #32
 80046a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d135      	bne.n	800474a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	613b      	str	r3, [r7, #16]
   return(result);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f023 0310 	bic.w	r3, r3, #16
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004704:	623a      	str	r2, [r7, #32]
 8004706:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	69f9      	ldr	r1, [r7, #28]
 800470a:	6a3a      	ldr	r2, [r7, #32]
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	61bb      	str	r3, [r7, #24]
   return(result);
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e5      	bne.n	80046e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b10      	cmp	r3, #16
 8004724:	d10a      	bne.n	800473c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fd9b 	bl	800427e <HAL_UARTEx_RxEventCallback>
 8004748:	e002      	b.n	8004750 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fd85 	bl	800425a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e002      	b.n	800475a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	3730      	adds	r7, #48	@ 0x30
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800479e:	f023 030c 	bic.w	r3, r3, #12
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004878 <UART_SetConfig+0x114>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d103      	bne.n	80047d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047cc:	f7ff f84c 	bl	8003868 <HAL_RCC_GetPCLK2Freq>
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	e002      	b.n	80047da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7ff f834 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 80047d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009a      	lsls	r2, r3, #2
 80047e4:	441a      	add	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	4a22      	ldr	r2, [pc, #136]	@ (800487c <UART_SetConfig+0x118>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	0119      	lsls	r1, r3, #4
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	009a      	lsls	r2, r3, #2
 8004804:	441a      	add	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004810:	4b1a      	ldr	r3, [pc, #104]	@ (800487c <UART_SetConfig+0x118>)
 8004812:	fba3 0302 	umull	r0, r3, r3, r2
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	2064      	movs	r0, #100	@ 0x64
 800481a:	fb00 f303 	mul.w	r3, r0, r3
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	3332      	adds	r3, #50	@ 0x32
 8004824:	4a15      	ldr	r2, [pc, #84]	@ (800487c <UART_SetConfig+0x118>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004830:	4419      	add	r1, r3
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009a      	lsls	r2, r3, #2
 800483c:	441a      	add	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	fbb2 f2f3 	udiv	r2, r2, r3
 8004848:	4b0c      	ldr	r3, [pc, #48]	@ (800487c <UART_SetConfig+0x118>)
 800484a:	fba3 0302 	umull	r0, r3, r3, r2
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2064      	movs	r0, #100	@ 0x64
 8004852:	fb00 f303 	mul.w	r3, r0, r3
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	3332      	adds	r3, #50	@ 0x32
 800485c:	4a07      	ldr	r2, [pc, #28]	@ (800487c <UART_SetConfig+0x118>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	f003 020f 	and.w	r2, r3, #15
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	440a      	add	r2, r1
 800486e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40013800 	.word	0x40013800
 800487c:	51eb851f 	.word	0x51eb851f

08004880 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	4603      	mov	r3, r0
 8004888:	460a      	mov	r2, r1
 800488a:	71fb      	strb	r3, [r7, #7]
 800488c:	4613      	mov	r3, r2
 800488e:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	4a13      	ldr	r2, [pc, #76]	@ (80048e0 <I2C_LCD_ExpanderWrite+0x60>)
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4413      	add	r3, r2
 8004898:	785a      	ldrb	r2, [r3, #1]
 800489a:	79bb      	ldrb	r3, [r7, #6]
 800489c:	4313      	orrs	r3, r2
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 80048a2:	79fa      	ldrb	r2, [r7, #7]
 80048a4:	490f      	ldr	r1, [pc, #60]	@ (80048e4 <I2C_LCD_ExpanderWrite+0x64>)
 80048a6:	4613      	mov	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	3304      	adds	r3, #4
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	79fa      	ldrb	r2, [r7, #7]
 80048b6:	490b      	ldr	r1, [pc, #44]	@ (80048e4 <I2C_LCD_ExpanderWrite+0x64>)
 80048b8:	4613      	mov	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	3308      	adds	r3, #8
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	b299      	uxth	r1, r3
 80048ca:	f107 020f 	add.w	r2, r7, #15
 80048ce:	2364      	movs	r3, #100	@ 0x64
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	2301      	movs	r3, #1
 80048d4:	f7fe f892 	bl	80029fc <HAL_I2C_Master_Transmit>
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200002f8 	.word	0x200002f8
 80048e4:	08005740 	.word	0x08005740

080048e8 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	460a      	mov	r2, r1
 80048f2:	71fb      	strb	r3, [r7, #7]
 80048f4:	4613      	mov	r3, r2
 80048f6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 80048f8:	79bb      	ldrb	r3, [r7, #6]
 80048fa:	f043 0304 	orr.w	r3, r3, #4
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	4611      	mov	r1, r2
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ffbb 	bl	8004880 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 800490a:	4b22      	ldr	r3, [pc, #136]	@ (8004994 <I2C_LCD_EnPulse+0xac>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	4b21      	ldr	r3, [pc, #132]	@ (8004998 <I2C_LCD_EnPulse+0xb0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a21      	ldr	r2, [pc, #132]	@ (800499c <I2C_LCD_EnPulse+0xb4>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	0c9b      	lsrs	r3, r3, #18
 800491c:	005a      	lsls	r2, r3, #1
 800491e:	4b1e      	ldr	r3, [pc, #120]	@ (8004998 <I2C_LCD_EnPulse+0xb0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	491e      	ldr	r1, [pc, #120]	@ (800499c <I2C_LCD_EnPulse+0xb4>)
 8004924:	fba1 1303 	umull	r1, r3, r1, r3
 8004928:	0c9b      	lsrs	r3, r3, #18
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	4b18      	ldr	r3, [pc, #96]	@ (8004994 <I2C_LCD_EnPulse+0xac>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	429a      	cmp	r2, r3
 800493c:	d8f8      	bhi.n	8004930 <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 800493e:	79bb      	ldrb	r3, [r7, #6]
 8004940:	f023 0304 	bic.w	r3, r3, #4
 8004944:	b2da      	uxtb	r2, r3
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff ff98 	bl	8004880 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8004950:	4b10      	ldr	r3, [pc, #64]	@ (8004994 <I2C_LCD_EnPulse+0xac>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <I2C_LCD_EnPulse+0xb0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a10      	ldr	r2, [pc, #64]	@ (800499c <I2C_LCD_EnPulse+0xb4>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	0c9b      	lsrs	r3, r3, #18
 8004962:	2232      	movs	r2, #50	@ 0x32
 8004964:	fb03 f202 	mul.w	r2, r3, r2
 8004968:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <I2C_LCD_EnPulse+0xb0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	490b      	ldr	r1, [pc, #44]	@ (800499c <I2C_LCD_EnPulse+0xb4>)
 800496e:	fba1 1303 	umull	r1, r3, r1, r3
 8004972:	0c9b      	lsrs	r3, r3, #18
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	4b06      	ldr	r3, [pc, #24]	@ (8004994 <I2C_LCD_EnPulse+0xac>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	429a      	cmp	r2, r3
 8004986:	d8f8      	bhi.n	800497a <I2C_LCD_EnPulse+0x92>
}
 8004988:	bf00      	nop
 800498a:	bf00      	nop
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	e000e010 	.word	0xe000e010
 8004998:	20000018 	.word	0x20000018
 800499c:	431bde83 	.word	0x431bde83

080049a0 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	460a      	mov	r2, r1
 80049aa:	71fb      	strb	r3, [r7, #7]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 80049b0:	79ba      	ldrb	r2, [r7, #6]
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	4611      	mov	r1, r2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff ff62 	bl	8004880 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 80049bc:	79ba      	ldrb	r2, [r7, #6]
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	4611      	mov	r1, r2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff ff90 	bl	80048e8 <I2C_LCD_EnPulse>
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
 80049da:	460b      	mov	r3, r1
 80049dc:	71bb      	strb	r3, [r7, #6]
 80049de:	4613      	mov	r3, r2
 80049e0:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 80049e2:	79bb      	ldrb	r3, [r7, #6]
 80049e4:	f023 030f 	bic.w	r3, r3, #15
 80049e8:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 80049ea:	79bb      	ldrb	r3, [r7, #6]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 80049f0:	7bfa      	ldrb	r2, [r7, #15]
 80049f2:	797b      	ldrb	r3, [r7, #5]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	4611      	mov	r1, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ffcf 	bl	80049a0 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8004a02:	7bba      	ldrb	r2, [r7, #14]
 8004a04:	797b      	ldrb	r3, [r7, #5]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff ffc6 	bl	80049a0 <I2C_LCD_Write4Bits>
}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	460a      	mov	r2, r1
 8004a26:	71fb      	strb	r3, [r7, #7]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8004a2c:	79b9      	ldrb	r1, [r7, #6]
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	2200      	movs	r2, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ffcc 	bl	80049d0 <I2C_LCD_Send>
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	460a      	mov	r2, r1
 8004a4a:	71fb      	strb	r3, [r7, #7]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8004a50:	79b9      	ldrb	r1, [r7, #6]
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	2201      	movs	r2, #1
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff ffba 	bl	80049d0 <I2C_LCD_Send>
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	@ 0x28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8004a6e:	bf00      	nop
 8004a70:	f7fc fb60 	bl	8001134 <HAL_GetTick>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b31      	cmp	r3, #49	@ 0x31
 8004a78:	d9fa      	bls.n	8004a70 <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	2130      	movs	r1, #48	@ 0x30
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff ffcc 	bl	8004a1c <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8004a84:	2300      	movs	r3, #0
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a88:	e01f      	b.n	8004aca <I2C_LCD_Init+0x66>
 8004a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8004bb8 <I2C_LCD_Init+0x154>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	4b4a      	ldr	r3, [pc, #296]	@ (8004bbc <I2C_LCD_Init+0x158>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc0 <I2C_LCD_Init+0x15c>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	0c9b      	lsrs	r3, r3, #18
 8004a9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004aa0:	fb03 f202 	mul.w	r2, r3, r2
 8004aa4:	4b45      	ldr	r3, [pc, #276]	@ (8004bbc <I2C_LCD_Init+0x158>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4945      	ldr	r1, [pc, #276]	@ (8004bc0 <I2C_LCD_Init+0x15c>)
 8004aaa:	fba1 1303 	umull	r1, r3, r1, r3
 8004aae:	0c9b      	lsrs	r3, r3, #18
 8004ab0:	085b      	lsrs	r3, r3, #1
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	4b40      	ldr	r3, [pc, #256]	@ (8004bb8 <I2C_LCD_Init+0x154>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d8f8      	bhi.n	8004ab6 <I2C_LCD_Init+0x52>
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d9dc      	bls.n	8004a8a <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	2130      	movs	r1, #48	@ 0x30
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ffa1 	bl	8004a1c <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8004ada:	2300      	movs	r3, #0
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	e01f      	b.n	8004b20 <I2C_LCD_Init+0xbc>
 8004ae0:	4b35      	ldr	r3, [pc, #212]	@ (8004bb8 <I2C_LCD_Init+0x154>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	4b35      	ldr	r3, [pc, #212]	@ (8004bbc <I2C_LCD_Init+0x158>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a35      	ldr	r2, [pc, #212]	@ (8004bc0 <I2C_LCD_Init+0x15c>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	0c9b      	lsrs	r3, r3, #18
 8004af2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004af6:	fb03 f202 	mul.w	r2, r3, r2
 8004afa:	4b30      	ldr	r3, [pc, #192]	@ (8004bbc <I2C_LCD_Init+0x158>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4930      	ldr	r1, [pc, #192]	@ (8004bc0 <I2C_LCD_Init+0x15c>)
 8004b00:	fba1 1303 	umull	r1, r3, r1, r3
 8004b04:	0c9b      	lsrs	r3, r3, #18
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb8 <I2C_LCD_Init+0x154>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d8f8      	bhi.n	8004b0c <I2C_LCD_Init+0xa8>
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	623b      	str	r3, [r7, #32]
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d9dc      	bls.n	8004ae0 <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2130      	movs	r1, #48	@ 0x30
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff ff76 	bl	8004a1c <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8004b30:	4b21      	ldr	r3, [pc, #132]	@ (8004bb8 <I2C_LCD_Init+0x154>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	4b21      	ldr	r3, [pc, #132]	@ (8004bbc <I2C_LCD_Init+0x158>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a21      	ldr	r2, [pc, #132]	@ (8004bc0 <I2C_LCD_Init+0x15c>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	0c9b      	lsrs	r3, r3, #18
 8004b42:	2296      	movs	r2, #150	@ 0x96
 8004b44:	fb03 f202 	mul.w	r2, r3, r2
 8004b48:	4b1c      	ldr	r3, [pc, #112]	@ (8004bbc <I2C_LCD_Init+0x158>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	491c      	ldr	r1, [pc, #112]	@ (8004bc0 <I2C_LCD_Init+0x15c>)
 8004b4e:	fba1 1303 	umull	r1, r3, r1, r3
 8004b52:	0c9b      	lsrs	r3, r3, #18
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	4b17      	ldr	r3, [pc, #92]	@ (8004bb8 <I2C_LCD_Init+0x154>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d8f8      	bhi.n	8004b5a <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ff55 	bl	8004a1c <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	2128      	movs	r1, #40	@ 0x28
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff ff50 	bl	8004a1c <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	210c      	movs	r1, #12
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff ff4b 	bl	8004a1c <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	2106      	movs	r1, #6
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ff46 	bl	8004a1c <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <I2C_LCD_Init+0x160>)
 8004b94:	2104      	movs	r1, #4
 8004b96:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	4a09      	ldr	r2, [pc, #36]	@ (8004bc4 <I2C_LCD_Init+0x160>)
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4413      	add	r3, r2
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 f80d 	bl	8004bc8 <I2C_LCD_Clear>
}
 8004bae:	bf00      	nop
 8004bb0:	3728      	adds	r7, #40	@ 0x28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	e000e010 	.word	0xe000e010
 8004bbc:	20000018 	.word	0x20000018
 8004bc0:	431bde83 	.word	0x431bde83
 8004bc4:	200002f8 	.word	0x200002f8

08004bc8 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff ff20 	bl	8004a1c <I2C_LCD_Cmd>
    DELAY_MS(2);
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	e01f      	b.n	8004c22 <I2C_LCD_Clear+0x5a>
 8004be2:	4b14      	ldr	r3, [pc, #80]	@ (8004c34 <I2C_LCD_Clear+0x6c>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	4b13      	ldr	r3, [pc, #76]	@ (8004c38 <I2C_LCD_Clear+0x70>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a13      	ldr	r2, [pc, #76]	@ (8004c3c <I2C_LCD_Clear+0x74>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	0c9b      	lsrs	r3, r3, #18
 8004bf4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004bf8:	fb03 f202 	mul.w	r2, r3, r2
 8004bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8004c38 <I2C_LCD_Clear+0x70>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	490e      	ldr	r1, [pc, #56]	@ (8004c3c <I2C_LCD_Clear+0x74>)
 8004c02:	fba1 1303 	umull	r1, r3, r1, r3
 8004c06:	0c9b      	lsrs	r3, r3, #18
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <I2C_LCD_Clear+0x6c>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d8f8      	bhi.n	8004c0e <I2C_LCD_Clear+0x46>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d9dc      	bls.n	8004be2 <I2C_LCD_Clear+0x1a>
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	e000e010 	.word	0xe000e010
 8004c38:	20000018 	.word	0x20000018
 8004c3c:	431bde83 	.word	0x431bde83

08004c40 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	71fb      	strb	r3, [r7, #7]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	71bb      	strb	r3, [r7, #6]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8004c52:	4b1a      	ldr	r3, [pc, #104]	@ (8004cbc <I2C_LCD_SetCursor+0x7c>)
 8004c54:	f107 0408 	add.w	r4, r7, #8
 8004c58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8004c5e:	79fa      	ldrb	r2, [r7, #7]
 8004c60:	4917      	ldr	r1, [pc, #92]	@ (8004cc0 <I2C_LCD_SetCursor+0x80>)
 8004c62:	4613      	mov	r3, r2
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	330a      	adds	r3, #10
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	797a      	ldrb	r2, [r7, #5]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d90a      	bls.n	8004c8c <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8004c76:	79fa      	ldrb	r2, [r7, #7]
 8004c78:	4911      	ldr	r1, [pc, #68]	@ (8004cc0 <I2C_LCD_SetCursor+0x80>)
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	330a      	adds	r3, #10
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8004c8c:	797b      	ldrb	r3, [r7, #5]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	3318      	adds	r3, #24
 8004c92:	443b      	add	r3, r7
 8004c94:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	79bb      	ldrb	r3, [r7, #6]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	b25b      	sxtb	r3, r3
 8004ca2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ca6:	b25b      	sxtb	r3, r3
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff feb4 	bl	8004a1c <I2C_LCD_Cmd>
}
 8004cb4:	bf00      	nop
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd90      	pop	{r4, r7, pc}
 8004cbc:	080056f0 	.word	0x080056f0
 8004cc0:	08005740 	.word	0x08005740

08004cc4 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	6039      	str	r1, [r7, #0]
 8004cce:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 8004cd0:	e008      	b.n	8004ce4 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	603a      	str	r2, [r7, #0]
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff feae 	bl	8004a40 <I2C_LCD_Data>
    while (*Str)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f2      	bne.n	8004cd2 <I2C_LCD_WriteString+0xe>
    }
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <I2C_LCD_Backlight>:
{
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

void I2C_LCD_Backlight(uint8_t I2C_LCD_InstanceIndex)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	4a06      	ldr	r2, [pc, #24]	@ (8004d20 <I2C_LCD_Backlight+0x28>)
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	4413      	add	r3, r2
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	705a      	strb	r2, [r3, #1]
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	2100      	movs	r1, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fdb4 	bl	8004880 <I2C_LCD_ExpanderWrite>
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	200002f8 	.word	0x200002f8

08004d24 <I2C_LCD_NoBacklight>:

void I2C_LCD_NoBacklight(uint8_t I2C_LCD_InstanceIndex)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_NOBACKLIGHT;
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	4a06      	ldr	r2, [pc, #24]	@ (8004d4c <I2C_LCD_NoBacklight+0x28>)
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	4413      	add	r3, r2
 8004d36:	2200      	movs	r2, #0
 8004d38:	705a      	strb	r2, [r3, #1]
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fd9e 	bl	8004880 <I2C_LCD_ExpanderWrite>
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	200002f8 	.word	0x200002f8

08004d50 <siprintf>:
 8004d50:	b40e      	push	{r1, r2, r3}
 8004d52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d56:	b500      	push	{lr}
 8004d58:	b09c      	sub	sp, #112	@ 0x70
 8004d5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d5c:	9002      	str	r0, [sp, #8]
 8004d5e:	9006      	str	r0, [sp, #24]
 8004d60:	9107      	str	r1, [sp, #28]
 8004d62:	9104      	str	r1, [sp, #16]
 8004d64:	4808      	ldr	r0, [pc, #32]	@ (8004d88 <siprintf+0x38>)
 8004d66:	4909      	ldr	r1, [pc, #36]	@ (8004d8c <siprintf+0x3c>)
 8004d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d6c:	9105      	str	r1, [sp, #20]
 8004d6e:	6800      	ldr	r0, [r0, #0]
 8004d70:	a902      	add	r1, sp, #8
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	f000 f992 	bl	800509c <_svfiprintf_r>
 8004d78:	2200      	movs	r2, #0
 8004d7a:	9b02      	ldr	r3, [sp, #8]
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	b01c      	add	sp, #112	@ 0x70
 8004d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d84:	b003      	add	sp, #12
 8004d86:	4770      	bx	lr
 8004d88:	20000024 	.word	0x20000024
 8004d8c:	ffff0208 	.word	0xffff0208

08004d90 <memset>:
 8004d90:	4603      	mov	r3, r0
 8004d92:	4402      	add	r2, r0
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d100      	bne.n	8004d9a <memset+0xa>
 8004d98:	4770      	bx	lr
 8004d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9e:	e7f9      	b.n	8004d94 <memset+0x4>

08004da0 <__errno>:
 8004da0:	4b01      	ldr	r3, [pc, #4]	@ (8004da8 <__errno+0x8>)
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000024 	.word	0x20000024

08004dac <__libc_init_array>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	2600      	movs	r6, #0
 8004db0:	4d0c      	ldr	r5, [pc, #48]	@ (8004de4 <__libc_init_array+0x38>)
 8004db2:	4c0d      	ldr	r4, [pc, #52]	@ (8004de8 <__libc_init_array+0x3c>)
 8004db4:	1b64      	subs	r4, r4, r5
 8004db6:	10a4      	asrs	r4, r4, #2
 8004db8:	42a6      	cmp	r6, r4
 8004dba:	d109      	bne.n	8004dd0 <__libc_init_array+0x24>
 8004dbc:	f000 fc78 	bl	80056b0 <_init>
 8004dc0:	2600      	movs	r6, #0
 8004dc2:	4d0a      	ldr	r5, [pc, #40]	@ (8004dec <__libc_init_array+0x40>)
 8004dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8004df0 <__libc_init_array+0x44>)
 8004dc6:	1b64      	subs	r4, r4, r5
 8004dc8:	10a4      	asrs	r4, r4, #2
 8004dca:	42a6      	cmp	r6, r4
 8004dcc:	d105      	bne.n	8004dda <__libc_init_array+0x2e>
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd4:	4798      	blx	r3
 8004dd6:	3601      	adds	r6, #1
 8004dd8:	e7ee      	b.n	8004db8 <__libc_init_array+0xc>
 8004dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dde:	4798      	blx	r3
 8004de0:	3601      	adds	r6, #1
 8004de2:	e7f2      	b.n	8004dca <__libc_init_array+0x1e>
 8004de4:	08005780 	.word	0x08005780
 8004de8:	08005780 	.word	0x08005780
 8004dec:	08005780 	.word	0x08005780
 8004df0:	08005784 	.word	0x08005784

08004df4 <__retarget_lock_acquire_recursive>:
 8004df4:	4770      	bx	lr

08004df6 <__retarget_lock_release_recursive>:
 8004df6:	4770      	bx	lr

08004df8 <_free_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	d040      	beq.n	8004e82 <_free_r+0x8a>
 8004e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e04:	1f0c      	subs	r4, r1, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bfb8      	it	lt
 8004e0a:	18e4      	addlt	r4, r4, r3
 8004e0c:	f000 f8de 	bl	8004fcc <__malloc_lock>
 8004e10:	4a1c      	ldr	r2, [pc, #112]	@ (8004e84 <_free_r+0x8c>)
 8004e12:	6813      	ldr	r3, [r2, #0]
 8004e14:	b933      	cbnz	r3, 8004e24 <_free_r+0x2c>
 8004e16:	6063      	str	r3, [r4, #4]
 8004e18:	6014      	str	r4, [r2, #0]
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e20:	f000 b8da 	b.w	8004fd8 <__malloc_unlock>
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	d908      	bls.n	8004e3a <_free_r+0x42>
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	1821      	adds	r1, r4, r0
 8004e2c:	428b      	cmp	r3, r1
 8004e2e:	bf01      	itttt	eq
 8004e30:	6819      	ldreq	r1, [r3, #0]
 8004e32:	685b      	ldreq	r3, [r3, #4]
 8004e34:	1809      	addeq	r1, r1, r0
 8004e36:	6021      	streq	r1, [r4, #0]
 8004e38:	e7ed      	b.n	8004e16 <_free_r+0x1e>
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b10b      	cbz	r3, 8004e44 <_free_r+0x4c>
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	d9fa      	bls.n	8004e3a <_free_r+0x42>
 8004e44:	6811      	ldr	r1, [r2, #0]
 8004e46:	1850      	adds	r0, r2, r1
 8004e48:	42a0      	cmp	r0, r4
 8004e4a:	d10b      	bne.n	8004e64 <_free_r+0x6c>
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	4401      	add	r1, r0
 8004e50:	1850      	adds	r0, r2, r1
 8004e52:	4283      	cmp	r3, r0
 8004e54:	6011      	str	r1, [r2, #0]
 8004e56:	d1e0      	bne.n	8004e1a <_free_r+0x22>
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4408      	add	r0, r1
 8004e5e:	6010      	str	r0, [r2, #0]
 8004e60:	6053      	str	r3, [r2, #4]
 8004e62:	e7da      	b.n	8004e1a <_free_r+0x22>
 8004e64:	d902      	bls.n	8004e6c <_free_r+0x74>
 8004e66:	230c      	movs	r3, #12
 8004e68:	602b      	str	r3, [r5, #0]
 8004e6a:	e7d6      	b.n	8004e1a <_free_r+0x22>
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	1821      	adds	r1, r4, r0
 8004e70:	428b      	cmp	r3, r1
 8004e72:	bf01      	itttt	eq
 8004e74:	6819      	ldreq	r1, [r3, #0]
 8004e76:	685b      	ldreq	r3, [r3, #4]
 8004e78:	1809      	addeq	r1, r1, r0
 8004e7a:	6021      	streq	r1, [r4, #0]
 8004e7c:	6063      	str	r3, [r4, #4]
 8004e7e:	6054      	str	r4, [r2, #4]
 8004e80:	e7cb      	b.n	8004e1a <_free_r+0x22>
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	20000440 	.word	0x20000440

08004e88 <sbrk_aligned>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ec8 <sbrk_aligned+0x40>)
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	6831      	ldr	r1, [r6, #0]
 8004e90:	4605      	mov	r5, r0
 8004e92:	b911      	cbnz	r1, 8004e9a <sbrk_aligned+0x12>
 8004e94:	f000 fbaa 	bl	80055ec <_sbrk_r>
 8004e98:	6030      	str	r0, [r6, #0]
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 fba5 	bl	80055ec <_sbrk_r>
 8004ea2:	1c43      	adds	r3, r0, #1
 8004ea4:	d103      	bne.n	8004eae <sbrk_aligned+0x26>
 8004ea6:	f04f 34ff 	mov.w	r4, #4294967295
 8004eaa:	4620      	mov	r0, r4
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
 8004eae:	1cc4      	adds	r4, r0, #3
 8004eb0:	f024 0403 	bic.w	r4, r4, #3
 8004eb4:	42a0      	cmp	r0, r4
 8004eb6:	d0f8      	beq.n	8004eaa <sbrk_aligned+0x22>
 8004eb8:	1a21      	subs	r1, r4, r0
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 fb96 	bl	80055ec <_sbrk_r>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d1f2      	bne.n	8004eaa <sbrk_aligned+0x22>
 8004ec4:	e7ef      	b.n	8004ea6 <sbrk_aligned+0x1e>
 8004ec6:	bf00      	nop
 8004ec8:	2000043c 	.word	0x2000043c

08004ecc <_malloc_r>:
 8004ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed0:	1ccd      	adds	r5, r1, #3
 8004ed2:	f025 0503 	bic.w	r5, r5, #3
 8004ed6:	3508      	adds	r5, #8
 8004ed8:	2d0c      	cmp	r5, #12
 8004eda:	bf38      	it	cc
 8004edc:	250c      	movcc	r5, #12
 8004ede:	2d00      	cmp	r5, #0
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	db01      	blt.n	8004ee8 <_malloc_r+0x1c>
 8004ee4:	42a9      	cmp	r1, r5
 8004ee6:	d904      	bls.n	8004ef2 <_malloc_r+0x26>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	6033      	str	r3, [r6, #0]
 8004eec:	2000      	movs	r0, #0
 8004eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ef2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fc8 <_malloc_r+0xfc>
 8004ef6:	f000 f869 	bl	8004fcc <__malloc_lock>
 8004efa:	f8d8 3000 	ldr.w	r3, [r8]
 8004efe:	461c      	mov	r4, r3
 8004f00:	bb44      	cbnz	r4, 8004f54 <_malloc_r+0x88>
 8004f02:	4629      	mov	r1, r5
 8004f04:	4630      	mov	r0, r6
 8004f06:	f7ff ffbf 	bl	8004e88 <sbrk_aligned>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	d158      	bne.n	8004fc2 <_malloc_r+0xf6>
 8004f10:	f8d8 4000 	ldr.w	r4, [r8]
 8004f14:	4627      	mov	r7, r4
 8004f16:	2f00      	cmp	r7, #0
 8004f18:	d143      	bne.n	8004fa2 <_malloc_r+0xd6>
 8004f1a:	2c00      	cmp	r4, #0
 8004f1c:	d04b      	beq.n	8004fb6 <_malloc_r+0xea>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	4639      	mov	r1, r7
 8004f22:	4630      	mov	r0, r6
 8004f24:	eb04 0903 	add.w	r9, r4, r3
 8004f28:	f000 fb60 	bl	80055ec <_sbrk_r>
 8004f2c:	4581      	cmp	r9, r0
 8004f2e:	d142      	bne.n	8004fb6 <_malloc_r+0xea>
 8004f30:	6821      	ldr	r1, [r4, #0]
 8004f32:	4630      	mov	r0, r6
 8004f34:	1a6d      	subs	r5, r5, r1
 8004f36:	4629      	mov	r1, r5
 8004f38:	f7ff ffa6 	bl	8004e88 <sbrk_aligned>
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d03a      	beq.n	8004fb6 <_malloc_r+0xea>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	442b      	add	r3, r5
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	f8d8 3000 	ldr.w	r3, [r8]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	bb62      	cbnz	r2, 8004fa8 <_malloc_r+0xdc>
 8004f4e:	f8c8 7000 	str.w	r7, [r8]
 8004f52:	e00f      	b.n	8004f74 <_malloc_r+0xa8>
 8004f54:	6822      	ldr	r2, [r4, #0]
 8004f56:	1b52      	subs	r2, r2, r5
 8004f58:	d420      	bmi.n	8004f9c <_malloc_r+0xd0>
 8004f5a:	2a0b      	cmp	r2, #11
 8004f5c:	d917      	bls.n	8004f8e <_malloc_r+0xc2>
 8004f5e:	1961      	adds	r1, r4, r5
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	6025      	str	r5, [r4, #0]
 8004f64:	bf18      	it	ne
 8004f66:	6059      	strne	r1, [r3, #4]
 8004f68:	6863      	ldr	r3, [r4, #4]
 8004f6a:	bf08      	it	eq
 8004f6c:	f8c8 1000 	streq.w	r1, [r8]
 8004f70:	5162      	str	r2, [r4, r5]
 8004f72:	604b      	str	r3, [r1, #4]
 8004f74:	4630      	mov	r0, r6
 8004f76:	f000 f82f 	bl	8004fd8 <__malloc_unlock>
 8004f7a:	f104 000b 	add.w	r0, r4, #11
 8004f7e:	1d23      	adds	r3, r4, #4
 8004f80:	f020 0007 	bic.w	r0, r0, #7
 8004f84:	1ac2      	subs	r2, r0, r3
 8004f86:	bf1c      	itt	ne
 8004f88:	1a1b      	subne	r3, r3, r0
 8004f8a:	50a3      	strne	r3, [r4, r2]
 8004f8c:	e7af      	b.n	8004eee <_malloc_r+0x22>
 8004f8e:	6862      	ldr	r2, [r4, #4]
 8004f90:	42a3      	cmp	r3, r4
 8004f92:	bf0c      	ite	eq
 8004f94:	f8c8 2000 	streq.w	r2, [r8]
 8004f98:	605a      	strne	r2, [r3, #4]
 8004f9a:	e7eb      	b.n	8004f74 <_malloc_r+0xa8>
 8004f9c:	4623      	mov	r3, r4
 8004f9e:	6864      	ldr	r4, [r4, #4]
 8004fa0:	e7ae      	b.n	8004f00 <_malloc_r+0x34>
 8004fa2:	463c      	mov	r4, r7
 8004fa4:	687f      	ldr	r7, [r7, #4]
 8004fa6:	e7b6      	b.n	8004f16 <_malloc_r+0x4a>
 8004fa8:	461a      	mov	r2, r3
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	42a3      	cmp	r3, r4
 8004fae:	d1fb      	bne.n	8004fa8 <_malloc_r+0xdc>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	6053      	str	r3, [r2, #4]
 8004fb4:	e7de      	b.n	8004f74 <_malloc_r+0xa8>
 8004fb6:	230c      	movs	r3, #12
 8004fb8:	4630      	mov	r0, r6
 8004fba:	6033      	str	r3, [r6, #0]
 8004fbc:	f000 f80c 	bl	8004fd8 <__malloc_unlock>
 8004fc0:	e794      	b.n	8004eec <_malloc_r+0x20>
 8004fc2:	6005      	str	r5, [r0, #0]
 8004fc4:	e7d6      	b.n	8004f74 <_malloc_r+0xa8>
 8004fc6:	bf00      	nop
 8004fc8:	20000440 	.word	0x20000440

08004fcc <__malloc_lock>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	@ (8004fd4 <__malloc_lock+0x8>)
 8004fce:	f7ff bf11 	b.w	8004df4 <__retarget_lock_acquire_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	20000438 	.word	0x20000438

08004fd8 <__malloc_unlock>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	@ (8004fe0 <__malloc_unlock+0x8>)
 8004fda:	f7ff bf0c 	b.w	8004df6 <__retarget_lock_release_recursive>
 8004fde:	bf00      	nop
 8004fe0:	20000438 	.word	0x20000438

08004fe4 <__ssputs_r>:
 8004fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe8:	461f      	mov	r7, r3
 8004fea:	688e      	ldr	r6, [r1, #8]
 8004fec:	4682      	mov	sl, r0
 8004fee:	42be      	cmp	r6, r7
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	4690      	mov	r8, r2
 8004ff4:	680b      	ldr	r3, [r1, #0]
 8004ff6:	d82d      	bhi.n	8005054 <__ssputs_r+0x70>
 8004ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ffc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005000:	d026      	beq.n	8005050 <__ssputs_r+0x6c>
 8005002:	6965      	ldr	r5, [r4, #20]
 8005004:	6909      	ldr	r1, [r1, #16]
 8005006:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800500a:	eba3 0901 	sub.w	r9, r3, r1
 800500e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005012:	1c7b      	adds	r3, r7, #1
 8005014:	444b      	add	r3, r9
 8005016:	106d      	asrs	r5, r5, #1
 8005018:	429d      	cmp	r5, r3
 800501a:	bf38      	it	cc
 800501c:	461d      	movcc	r5, r3
 800501e:	0553      	lsls	r3, r2, #21
 8005020:	d527      	bpl.n	8005072 <__ssputs_r+0x8e>
 8005022:	4629      	mov	r1, r5
 8005024:	f7ff ff52 	bl	8004ecc <_malloc_r>
 8005028:	4606      	mov	r6, r0
 800502a:	b360      	cbz	r0, 8005086 <__ssputs_r+0xa2>
 800502c:	464a      	mov	r2, r9
 800502e:	6921      	ldr	r1, [r4, #16]
 8005030:	f000 fafa 	bl	8005628 <memcpy>
 8005034:	89a3      	ldrh	r3, [r4, #12]
 8005036:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800503a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800503e:	81a3      	strh	r3, [r4, #12]
 8005040:	6126      	str	r6, [r4, #16]
 8005042:	444e      	add	r6, r9
 8005044:	6026      	str	r6, [r4, #0]
 8005046:	463e      	mov	r6, r7
 8005048:	6165      	str	r5, [r4, #20]
 800504a:	eba5 0509 	sub.w	r5, r5, r9
 800504e:	60a5      	str	r5, [r4, #8]
 8005050:	42be      	cmp	r6, r7
 8005052:	d900      	bls.n	8005056 <__ssputs_r+0x72>
 8005054:	463e      	mov	r6, r7
 8005056:	4632      	mov	r2, r6
 8005058:	4641      	mov	r1, r8
 800505a:	6820      	ldr	r0, [r4, #0]
 800505c:	f000 faac 	bl	80055b8 <memmove>
 8005060:	2000      	movs	r0, #0
 8005062:	68a3      	ldr	r3, [r4, #8]
 8005064:	1b9b      	subs	r3, r3, r6
 8005066:	60a3      	str	r3, [r4, #8]
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	4433      	add	r3, r6
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005072:	462a      	mov	r2, r5
 8005074:	f000 fae6 	bl	8005644 <_realloc_r>
 8005078:	4606      	mov	r6, r0
 800507a:	2800      	cmp	r0, #0
 800507c:	d1e0      	bne.n	8005040 <__ssputs_r+0x5c>
 800507e:	4650      	mov	r0, sl
 8005080:	6921      	ldr	r1, [r4, #16]
 8005082:	f7ff feb9 	bl	8004df8 <_free_r>
 8005086:	230c      	movs	r3, #12
 8005088:	f8ca 3000 	str.w	r3, [sl]
 800508c:	89a3      	ldrh	r3, [r4, #12]
 800508e:	f04f 30ff 	mov.w	r0, #4294967295
 8005092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005096:	81a3      	strh	r3, [r4, #12]
 8005098:	e7e9      	b.n	800506e <__ssputs_r+0x8a>
	...

0800509c <_svfiprintf_r>:
 800509c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a0:	4698      	mov	r8, r3
 80050a2:	898b      	ldrh	r3, [r1, #12]
 80050a4:	4607      	mov	r7, r0
 80050a6:	061b      	lsls	r3, r3, #24
 80050a8:	460d      	mov	r5, r1
 80050aa:	4614      	mov	r4, r2
 80050ac:	b09d      	sub	sp, #116	@ 0x74
 80050ae:	d510      	bpl.n	80050d2 <_svfiprintf_r+0x36>
 80050b0:	690b      	ldr	r3, [r1, #16]
 80050b2:	b973      	cbnz	r3, 80050d2 <_svfiprintf_r+0x36>
 80050b4:	2140      	movs	r1, #64	@ 0x40
 80050b6:	f7ff ff09 	bl	8004ecc <_malloc_r>
 80050ba:	6028      	str	r0, [r5, #0]
 80050bc:	6128      	str	r0, [r5, #16]
 80050be:	b930      	cbnz	r0, 80050ce <_svfiprintf_r+0x32>
 80050c0:	230c      	movs	r3, #12
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	b01d      	add	sp, #116	@ 0x74
 80050ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ce:	2340      	movs	r3, #64	@ 0x40
 80050d0:	616b      	str	r3, [r5, #20]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80050d6:	2320      	movs	r3, #32
 80050d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050dc:	2330      	movs	r3, #48	@ 0x30
 80050de:	f04f 0901 	mov.w	r9, #1
 80050e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80050e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005280 <_svfiprintf_r+0x1e4>
 80050ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050ee:	4623      	mov	r3, r4
 80050f0:	469a      	mov	sl, r3
 80050f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050f6:	b10a      	cbz	r2, 80050fc <_svfiprintf_r+0x60>
 80050f8:	2a25      	cmp	r2, #37	@ 0x25
 80050fa:	d1f9      	bne.n	80050f0 <_svfiprintf_r+0x54>
 80050fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005100:	d00b      	beq.n	800511a <_svfiprintf_r+0x7e>
 8005102:	465b      	mov	r3, fp
 8005104:	4622      	mov	r2, r4
 8005106:	4629      	mov	r1, r5
 8005108:	4638      	mov	r0, r7
 800510a:	f7ff ff6b 	bl	8004fe4 <__ssputs_r>
 800510e:	3001      	adds	r0, #1
 8005110:	f000 80a7 	beq.w	8005262 <_svfiprintf_r+0x1c6>
 8005114:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005116:	445a      	add	r2, fp
 8005118:	9209      	str	r2, [sp, #36]	@ 0x24
 800511a:	f89a 3000 	ldrb.w	r3, [sl]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 809f 	beq.w	8005262 <_svfiprintf_r+0x1c6>
 8005124:	2300      	movs	r3, #0
 8005126:	f04f 32ff 	mov.w	r2, #4294967295
 800512a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800512e:	f10a 0a01 	add.w	sl, sl, #1
 8005132:	9304      	str	r3, [sp, #16]
 8005134:	9307      	str	r3, [sp, #28]
 8005136:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800513a:	931a      	str	r3, [sp, #104]	@ 0x68
 800513c:	4654      	mov	r4, sl
 800513e:	2205      	movs	r2, #5
 8005140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005144:	484e      	ldr	r0, [pc, #312]	@ (8005280 <_svfiprintf_r+0x1e4>)
 8005146:	f000 fa61 	bl	800560c <memchr>
 800514a:	9a04      	ldr	r2, [sp, #16]
 800514c:	b9d8      	cbnz	r0, 8005186 <_svfiprintf_r+0xea>
 800514e:	06d0      	lsls	r0, r2, #27
 8005150:	bf44      	itt	mi
 8005152:	2320      	movmi	r3, #32
 8005154:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005158:	0711      	lsls	r1, r2, #28
 800515a:	bf44      	itt	mi
 800515c:	232b      	movmi	r3, #43	@ 0x2b
 800515e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005162:	f89a 3000 	ldrb.w	r3, [sl]
 8005166:	2b2a      	cmp	r3, #42	@ 0x2a
 8005168:	d015      	beq.n	8005196 <_svfiprintf_r+0xfa>
 800516a:	4654      	mov	r4, sl
 800516c:	2000      	movs	r0, #0
 800516e:	f04f 0c0a 	mov.w	ip, #10
 8005172:	9a07      	ldr	r2, [sp, #28]
 8005174:	4621      	mov	r1, r4
 8005176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800517a:	3b30      	subs	r3, #48	@ 0x30
 800517c:	2b09      	cmp	r3, #9
 800517e:	d94b      	bls.n	8005218 <_svfiprintf_r+0x17c>
 8005180:	b1b0      	cbz	r0, 80051b0 <_svfiprintf_r+0x114>
 8005182:	9207      	str	r2, [sp, #28]
 8005184:	e014      	b.n	80051b0 <_svfiprintf_r+0x114>
 8005186:	eba0 0308 	sub.w	r3, r0, r8
 800518a:	fa09 f303 	lsl.w	r3, r9, r3
 800518e:	4313      	orrs	r3, r2
 8005190:	46a2      	mov	sl, r4
 8005192:	9304      	str	r3, [sp, #16]
 8005194:	e7d2      	b.n	800513c <_svfiprintf_r+0xa0>
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	1d19      	adds	r1, r3, #4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	9103      	str	r1, [sp, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bfbb      	ittet	lt
 80051a2:	425b      	neglt	r3, r3
 80051a4:	f042 0202 	orrlt.w	r2, r2, #2
 80051a8:	9307      	strge	r3, [sp, #28]
 80051aa:	9307      	strlt	r3, [sp, #28]
 80051ac:	bfb8      	it	lt
 80051ae:	9204      	strlt	r2, [sp, #16]
 80051b0:	7823      	ldrb	r3, [r4, #0]
 80051b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80051b4:	d10a      	bne.n	80051cc <_svfiprintf_r+0x130>
 80051b6:	7863      	ldrb	r3, [r4, #1]
 80051b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80051ba:	d132      	bne.n	8005222 <_svfiprintf_r+0x186>
 80051bc:	9b03      	ldr	r3, [sp, #12]
 80051be:	3402      	adds	r4, #2
 80051c0:	1d1a      	adds	r2, r3, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	9203      	str	r2, [sp, #12]
 80051c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051ca:	9305      	str	r3, [sp, #20]
 80051cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005284 <_svfiprintf_r+0x1e8>
 80051d0:	2203      	movs	r2, #3
 80051d2:	4650      	mov	r0, sl
 80051d4:	7821      	ldrb	r1, [r4, #0]
 80051d6:	f000 fa19 	bl	800560c <memchr>
 80051da:	b138      	cbz	r0, 80051ec <_svfiprintf_r+0x150>
 80051dc:	2240      	movs	r2, #64	@ 0x40
 80051de:	9b04      	ldr	r3, [sp, #16]
 80051e0:	eba0 000a 	sub.w	r0, r0, sl
 80051e4:	4082      	lsls	r2, r0
 80051e6:	4313      	orrs	r3, r2
 80051e8:	3401      	adds	r4, #1
 80051ea:	9304      	str	r3, [sp, #16]
 80051ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f0:	2206      	movs	r2, #6
 80051f2:	4825      	ldr	r0, [pc, #148]	@ (8005288 <_svfiprintf_r+0x1ec>)
 80051f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051f8:	f000 fa08 	bl	800560c <memchr>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d036      	beq.n	800526e <_svfiprintf_r+0x1d2>
 8005200:	4b22      	ldr	r3, [pc, #136]	@ (800528c <_svfiprintf_r+0x1f0>)
 8005202:	bb1b      	cbnz	r3, 800524c <_svfiprintf_r+0x1b0>
 8005204:	9b03      	ldr	r3, [sp, #12]
 8005206:	3307      	adds	r3, #7
 8005208:	f023 0307 	bic.w	r3, r3, #7
 800520c:	3308      	adds	r3, #8
 800520e:	9303      	str	r3, [sp, #12]
 8005210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005212:	4433      	add	r3, r6
 8005214:	9309      	str	r3, [sp, #36]	@ 0x24
 8005216:	e76a      	b.n	80050ee <_svfiprintf_r+0x52>
 8005218:	460c      	mov	r4, r1
 800521a:	2001      	movs	r0, #1
 800521c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005220:	e7a8      	b.n	8005174 <_svfiprintf_r+0xd8>
 8005222:	2300      	movs	r3, #0
 8005224:	f04f 0c0a 	mov.w	ip, #10
 8005228:	4619      	mov	r1, r3
 800522a:	3401      	adds	r4, #1
 800522c:	9305      	str	r3, [sp, #20]
 800522e:	4620      	mov	r0, r4
 8005230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005234:	3a30      	subs	r2, #48	@ 0x30
 8005236:	2a09      	cmp	r2, #9
 8005238:	d903      	bls.n	8005242 <_svfiprintf_r+0x1a6>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0c6      	beq.n	80051cc <_svfiprintf_r+0x130>
 800523e:	9105      	str	r1, [sp, #20]
 8005240:	e7c4      	b.n	80051cc <_svfiprintf_r+0x130>
 8005242:	4604      	mov	r4, r0
 8005244:	2301      	movs	r3, #1
 8005246:	fb0c 2101 	mla	r1, ip, r1, r2
 800524a:	e7f0      	b.n	800522e <_svfiprintf_r+0x192>
 800524c:	ab03      	add	r3, sp, #12
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	462a      	mov	r2, r5
 8005252:	4638      	mov	r0, r7
 8005254:	4b0e      	ldr	r3, [pc, #56]	@ (8005290 <_svfiprintf_r+0x1f4>)
 8005256:	a904      	add	r1, sp, #16
 8005258:	f3af 8000 	nop.w
 800525c:	1c42      	adds	r2, r0, #1
 800525e:	4606      	mov	r6, r0
 8005260:	d1d6      	bne.n	8005210 <_svfiprintf_r+0x174>
 8005262:	89ab      	ldrh	r3, [r5, #12]
 8005264:	065b      	lsls	r3, r3, #25
 8005266:	f53f af2d 	bmi.w	80050c4 <_svfiprintf_r+0x28>
 800526a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800526c:	e72c      	b.n	80050c8 <_svfiprintf_r+0x2c>
 800526e:	ab03      	add	r3, sp, #12
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	462a      	mov	r2, r5
 8005274:	4638      	mov	r0, r7
 8005276:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <_svfiprintf_r+0x1f4>)
 8005278:	a904      	add	r1, sp, #16
 800527a:	f000 f87d 	bl	8005378 <_printf_i>
 800527e:	e7ed      	b.n	800525c <_svfiprintf_r+0x1c0>
 8005280:	0800574c 	.word	0x0800574c
 8005284:	08005752 	.word	0x08005752
 8005288:	08005756 	.word	0x08005756
 800528c:	00000000 	.word	0x00000000
 8005290:	08004fe5 	.word	0x08004fe5

08005294 <_printf_common>:
 8005294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005298:	4616      	mov	r6, r2
 800529a:	4698      	mov	r8, r3
 800529c:	688a      	ldr	r2, [r1, #8]
 800529e:	690b      	ldr	r3, [r1, #16]
 80052a0:	4607      	mov	r7, r0
 80052a2:	4293      	cmp	r3, r2
 80052a4:	bfb8      	it	lt
 80052a6:	4613      	movlt	r3, r2
 80052a8:	6033      	str	r3, [r6, #0]
 80052aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052ae:	460c      	mov	r4, r1
 80052b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052b4:	b10a      	cbz	r2, 80052ba <_printf_common+0x26>
 80052b6:	3301      	adds	r3, #1
 80052b8:	6033      	str	r3, [r6, #0]
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	0699      	lsls	r1, r3, #26
 80052be:	bf42      	ittt	mi
 80052c0:	6833      	ldrmi	r3, [r6, #0]
 80052c2:	3302      	addmi	r3, #2
 80052c4:	6033      	strmi	r3, [r6, #0]
 80052c6:	6825      	ldr	r5, [r4, #0]
 80052c8:	f015 0506 	ands.w	r5, r5, #6
 80052cc:	d106      	bne.n	80052dc <_printf_common+0x48>
 80052ce:	f104 0a19 	add.w	sl, r4, #25
 80052d2:	68e3      	ldr	r3, [r4, #12]
 80052d4:	6832      	ldr	r2, [r6, #0]
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	42ab      	cmp	r3, r5
 80052da:	dc2b      	bgt.n	8005334 <_printf_common+0xa0>
 80052dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052e0:	6822      	ldr	r2, [r4, #0]
 80052e2:	3b00      	subs	r3, #0
 80052e4:	bf18      	it	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	0692      	lsls	r2, r2, #26
 80052ea:	d430      	bmi.n	800534e <_printf_common+0xba>
 80052ec:	4641      	mov	r1, r8
 80052ee:	4638      	mov	r0, r7
 80052f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052f4:	47c8      	blx	r9
 80052f6:	3001      	adds	r0, #1
 80052f8:	d023      	beq.n	8005342 <_printf_common+0xae>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	6922      	ldr	r2, [r4, #16]
 80052fe:	f003 0306 	and.w	r3, r3, #6
 8005302:	2b04      	cmp	r3, #4
 8005304:	bf14      	ite	ne
 8005306:	2500      	movne	r5, #0
 8005308:	6833      	ldreq	r3, [r6, #0]
 800530a:	f04f 0600 	mov.w	r6, #0
 800530e:	bf08      	it	eq
 8005310:	68e5      	ldreq	r5, [r4, #12]
 8005312:	f104 041a 	add.w	r4, r4, #26
 8005316:	bf08      	it	eq
 8005318:	1aed      	subeq	r5, r5, r3
 800531a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800531e:	bf08      	it	eq
 8005320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005324:	4293      	cmp	r3, r2
 8005326:	bfc4      	itt	gt
 8005328:	1a9b      	subgt	r3, r3, r2
 800532a:	18ed      	addgt	r5, r5, r3
 800532c:	42b5      	cmp	r5, r6
 800532e:	d11a      	bne.n	8005366 <_printf_common+0xd2>
 8005330:	2000      	movs	r0, #0
 8005332:	e008      	b.n	8005346 <_printf_common+0xb2>
 8005334:	2301      	movs	r3, #1
 8005336:	4652      	mov	r2, sl
 8005338:	4641      	mov	r1, r8
 800533a:	4638      	mov	r0, r7
 800533c:	47c8      	blx	r9
 800533e:	3001      	adds	r0, #1
 8005340:	d103      	bne.n	800534a <_printf_common+0xb6>
 8005342:	f04f 30ff 	mov.w	r0, #4294967295
 8005346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534a:	3501      	adds	r5, #1
 800534c:	e7c1      	b.n	80052d2 <_printf_common+0x3e>
 800534e:	2030      	movs	r0, #48	@ 0x30
 8005350:	18e1      	adds	r1, r4, r3
 8005352:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800535c:	4422      	add	r2, r4
 800535e:	3302      	adds	r3, #2
 8005360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005364:	e7c2      	b.n	80052ec <_printf_common+0x58>
 8005366:	2301      	movs	r3, #1
 8005368:	4622      	mov	r2, r4
 800536a:	4641      	mov	r1, r8
 800536c:	4638      	mov	r0, r7
 800536e:	47c8      	blx	r9
 8005370:	3001      	adds	r0, #1
 8005372:	d0e6      	beq.n	8005342 <_printf_common+0xae>
 8005374:	3601      	adds	r6, #1
 8005376:	e7d9      	b.n	800532c <_printf_common+0x98>

08005378 <_printf_i>:
 8005378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800537c:	7e0f      	ldrb	r7, [r1, #24]
 800537e:	4691      	mov	r9, r2
 8005380:	2f78      	cmp	r7, #120	@ 0x78
 8005382:	4680      	mov	r8, r0
 8005384:	460c      	mov	r4, r1
 8005386:	469a      	mov	sl, r3
 8005388:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800538a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800538e:	d807      	bhi.n	80053a0 <_printf_i+0x28>
 8005390:	2f62      	cmp	r7, #98	@ 0x62
 8005392:	d80a      	bhi.n	80053aa <_printf_i+0x32>
 8005394:	2f00      	cmp	r7, #0
 8005396:	f000 80d3 	beq.w	8005540 <_printf_i+0x1c8>
 800539a:	2f58      	cmp	r7, #88	@ 0x58
 800539c:	f000 80ba 	beq.w	8005514 <_printf_i+0x19c>
 80053a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053a8:	e03a      	b.n	8005420 <_printf_i+0xa8>
 80053aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053ae:	2b15      	cmp	r3, #21
 80053b0:	d8f6      	bhi.n	80053a0 <_printf_i+0x28>
 80053b2:	a101      	add	r1, pc, #4	@ (adr r1, 80053b8 <_printf_i+0x40>)
 80053b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053b8:	08005411 	.word	0x08005411
 80053bc:	08005425 	.word	0x08005425
 80053c0:	080053a1 	.word	0x080053a1
 80053c4:	080053a1 	.word	0x080053a1
 80053c8:	080053a1 	.word	0x080053a1
 80053cc:	080053a1 	.word	0x080053a1
 80053d0:	08005425 	.word	0x08005425
 80053d4:	080053a1 	.word	0x080053a1
 80053d8:	080053a1 	.word	0x080053a1
 80053dc:	080053a1 	.word	0x080053a1
 80053e0:	080053a1 	.word	0x080053a1
 80053e4:	08005527 	.word	0x08005527
 80053e8:	0800544f 	.word	0x0800544f
 80053ec:	080054e1 	.word	0x080054e1
 80053f0:	080053a1 	.word	0x080053a1
 80053f4:	080053a1 	.word	0x080053a1
 80053f8:	08005549 	.word	0x08005549
 80053fc:	080053a1 	.word	0x080053a1
 8005400:	0800544f 	.word	0x0800544f
 8005404:	080053a1 	.word	0x080053a1
 8005408:	080053a1 	.word	0x080053a1
 800540c:	080054e9 	.word	0x080054e9
 8005410:	6833      	ldr	r3, [r6, #0]
 8005412:	1d1a      	adds	r2, r3, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6032      	str	r2, [r6, #0]
 8005418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800541c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005420:	2301      	movs	r3, #1
 8005422:	e09e      	b.n	8005562 <_printf_i+0x1ea>
 8005424:	6833      	ldr	r3, [r6, #0]
 8005426:	6820      	ldr	r0, [r4, #0]
 8005428:	1d19      	adds	r1, r3, #4
 800542a:	6031      	str	r1, [r6, #0]
 800542c:	0606      	lsls	r6, r0, #24
 800542e:	d501      	bpl.n	8005434 <_printf_i+0xbc>
 8005430:	681d      	ldr	r5, [r3, #0]
 8005432:	e003      	b.n	800543c <_printf_i+0xc4>
 8005434:	0645      	lsls	r5, r0, #25
 8005436:	d5fb      	bpl.n	8005430 <_printf_i+0xb8>
 8005438:	f9b3 5000 	ldrsh.w	r5, [r3]
 800543c:	2d00      	cmp	r5, #0
 800543e:	da03      	bge.n	8005448 <_printf_i+0xd0>
 8005440:	232d      	movs	r3, #45	@ 0x2d
 8005442:	426d      	negs	r5, r5
 8005444:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005448:	230a      	movs	r3, #10
 800544a:	4859      	ldr	r0, [pc, #356]	@ (80055b0 <_printf_i+0x238>)
 800544c:	e011      	b.n	8005472 <_printf_i+0xfa>
 800544e:	6821      	ldr	r1, [r4, #0]
 8005450:	6833      	ldr	r3, [r6, #0]
 8005452:	0608      	lsls	r0, r1, #24
 8005454:	f853 5b04 	ldr.w	r5, [r3], #4
 8005458:	d402      	bmi.n	8005460 <_printf_i+0xe8>
 800545a:	0649      	lsls	r1, r1, #25
 800545c:	bf48      	it	mi
 800545e:	b2ad      	uxthmi	r5, r5
 8005460:	2f6f      	cmp	r7, #111	@ 0x6f
 8005462:	6033      	str	r3, [r6, #0]
 8005464:	bf14      	ite	ne
 8005466:	230a      	movne	r3, #10
 8005468:	2308      	moveq	r3, #8
 800546a:	4851      	ldr	r0, [pc, #324]	@ (80055b0 <_printf_i+0x238>)
 800546c:	2100      	movs	r1, #0
 800546e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005472:	6866      	ldr	r6, [r4, #4]
 8005474:	2e00      	cmp	r6, #0
 8005476:	bfa8      	it	ge
 8005478:	6821      	ldrge	r1, [r4, #0]
 800547a:	60a6      	str	r6, [r4, #8]
 800547c:	bfa4      	itt	ge
 800547e:	f021 0104 	bicge.w	r1, r1, #4
 8005482:	6021      	strge	r1, [r4, #0]
 8005484:	b90d      	cbnz	r5, 800548a <_printf_i+0x112>
 8005486:	2e00      	cmp	r6, #0
 8005488:	d04b      	beq.n	8005522 <_printf_i+0x1aa>
 800548a:	4616      	mov	r6, r2
 800548c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005490:	fb03 5711 	mls	r7, r3, r1, r5
 8005494:	5dc7      	ldrb	r7, [r0, r7]
 8005496:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800549a:	462f      	mov	r7, r5
 800549c:	42bb      	cmp	r3, r7
 800549e:	460d      	mov	r5, r1
 80054a0:	d9f4      	bls.n	800548c <_printf_i+0x114>
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d10b      	bne.n	80054be <_printf_i+0x146>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	07df      	lsls	r7, r3, #31
 80054aa:	d508      	bpl.n	80054be <_printf_i+0x146>
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	6861      	ldr	r1, [r4, #4]
 80054b0:	4299      	cmp	r1, r3
 80054b2:	bfde      	ittt	le
 80054b4:	2330      	movle	r3, #48	@ 0x30
 80054b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054be:	1b92      	subs	r2, r2, r6
 80054c0:	6122      	str	r2, [r4, #16]
 80054c2:	464b      	mov	r3, r9
 80054c4:	4621      	mov	r1, r4
 80054c6:	4640      	mov	r0, r8
 80054c8:	f8cd a000 	str.w	sl, [sp]
 80054cc:	aa03      	add	r2, sp, #12
 80054ce:	f7ff fee1 	bl	8005294 <_printf_common>
 80054d2:	3001      	adds	r0, #1
 80054d4:	d14a      	bne.n	800556c <_printf_i+0x1f4>
 80054d6:	f04f 30ff 	mov.w	r0, #4294967295
 80054da:	b004      	add	sp, #16
 80054dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	f043 0320 	orr.w	r3, r3, #32
 80054e6:	6023      	str	r3, [r4, #0]
 80054e8:	2778      	movs	r7, #120	@ 0x78
 80054ea:	4832      	ldr	r0, [pc, #200]	@ (80055b4 <_printf_i+0x23c>)
 80054ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	6831      	ldr	r1, [r6, #0]
 80054f4:	061f      	lsls	r7, r3, #24
 80054f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80054fa:	d402      	bmi.n	8005502 <_printf_i+0x18a>
 80054fc:	065f      	lsls	r7, r3, #25
 80054fe:	bf48      	it	mi
 8005500:	b2ad      	uxthmi	r5, r5
 8005502:	6031      	str	r1, [r6, #0]
 8005504:	07d9      	lsls	r1, r3, #31
 8005506:	bf44      	itt	mi
 8005508:	f043 0320 	orrmi.w	r3, r3, #32
 800550c:	6023      	strmi	r3, [r4, #0]
 800550e:	b11d      	cbz	r5, 8005518 <_printf_i+0x1a0>
 8005510:	2310      	movs	r3, #16
 8005512:	e7ab      	b.n	800546c <_printf_i+0xf4>
 8005514:	4826      	ldr	r0, [pc, #152]	@ (80055b0 <_printf_i+0x238>)
 8005516:	e7e9      	b.n	80054ec <_printf_i+0x174>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	f023 0320 	bic.w	r3, r3, #32
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	e7f6      	b.n	8005510 <_printf_i+0x198>
 8005522:	4616      	mov	r6, r2
 8005524:	e7bd      	b.n	80054a2 <_printf_i+0x12a>
 8005526:	6833      	ldr	r3, [r6, #0]
 8005528:	6825      	ldr	r5, [r4, #0]
 800552a:	1d18      	adds	r0, r3, #4
 800552c:	6961      	ldr	r1, [r4, #20]
 800552e:	6030      	str	r0, [r6, #0]
 8005530:	062e      	lsls	r6, r5, #24
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	d501      	bpl.n	800553a <_printf_i+0x1c2>
 8005536:	6019      	str	r1, [r3, #0]
 8005538:	e002      	b.n	8005540 <_printf_i+0x1c8>
 800553a:	0668      	lsls	r0, r5, #25
 800553c:	d5fb      	bpl.n	8005536 <_printf_i+0x1be>
 800553e:	8019      	strh	r1, [r3, #0]
 8005540:	2300      	movs	r3, #0
 8005542:	4616      	mov	r6, r2
 8005544:	6123      	str	r3, [r4, #16]
 8005546:	e7bc      	b.n	80054c2 <_printf_i+0x14a>
 8005548:	6833      	ldr	r3, [r6, #0]
 800554a:	2100      	movs	r1, #0
 800554c:	1d1a      	adds	r2, r3, #4
 800554e:	6032      	str	r2, [r6, #0]
 8005550:	681e      	ldr	r6, [r3, #0]
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	4630      	mov	r0, r6
 8005556:	f000 f859 	bl	800560c <memchr>
 800555a:	b108      	cbz	r0, 8005560 <_printf_i+0x1e8>
 800555c:	1b80      	subs	r0, r0, r6
 800555e:	6060      	str	r0, [r4, #4]
 8005560:	6863      	ldr	r3, [r4, #4]
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	2300      	movs	r3, #0
 8005566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800556a:	e7aa      	b.n	80054c2 <_printf_i+0x14a>
 800556c:	4632      	mov	r2, r6
 800556e:	4649      	mov	r1, r9
 8005570:	4640      	mov	r0, r8
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	47d0      	blx	sl
 8005576:	3001      	adds	r0, #1
 8005578:	d0ad      	beq.n	80054d6 <_printf_i+0x15e>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	079b      	lsls	r3, r3, #30
 800557e:	d413      	bmi.n	80055a8 <_printf_i+0x230>
 8005580:	68e0      	ldr	r0, [r4, #12]
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	4298      	cmp	r0, r3
 8005586:	bfb8      	it	lt
 8005588:	4618      	movlt	r0, r3
 800558a:	e7a6      	b.n	80054da <_printf_i+0x162>
 800558c:	2301      	movs	r3, #1
 800558e:	4632      	mov	r2, r6
 8005590:	4649      	mov	r1, r9
 8005592:	4640      	mov	r0, r8
 8005594:	47d0      	blx	sl
 8005596:	3001      	adds	r0, #1
 8005598:	d09d      	beq.n	80054d6 <_printf_i+0x15e>
 800559a:	3501      	adds	r5, #1
 800559c:	68e3      	ldr	r3, [r4, #12]
 800559e:	9903      	ldr	r1, [sp, #12]
 80055a0:	1a5b      	subs	r3, r3, r1
 80055a2:	42ab      	cmp	r3, r5
 80055a4:	dcf2      	bgt.n	800558c <_printf_i+0x214>
 80055a6:	e7eb      	b.n	8005580 <_printf_i+0x208>
 80055a8:	2500      	movs	r5, #0
 80055aa:	f104 0619 	add.w	r6, r4, #25
 80055ae:	e7f5      	b.n	800559c <_printf_i+0x224>
 80055b0:	0800575d 	.word	0x0800575d
 80055b4:	0800576e 	.word	0x0800576e

080055b8 <memmove>:
 80055b8:	4288      	cmp	r0, r1
 80055ba:	b510      	push	{r4, lr}
 80055bc:	eb01 0402 	add.w	r4, r1, r2
 80055c0:	d902      	bls.n	80055c8 <memmove+0x10>
 80055c2:	4284      	cmp	r4, r0
 80055c4:	4623      	mov	r3, r4
 80055c6:	d807      	bhi.n	80055d8 <memmove+0x20>
 80055c8:	1e43      	subs	r3, r0, #1
 80055ca:	42a1      	cmp	r1, r4
 80055cc:	d008      	beq.n	80055e0 <memmove+0x28>
 80055ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055d6:	e7f8      	b.n	80055ca <memmove+0x12>
 80055d8:	4601      	mov	r1, r0
 80055da:	4402      	add	r2, r0
 80055dc:	428a      	cmp	r2, r1
 80055de:	d100      	bne.n	80055e2 <memmove+0x2a>
 80055e0:	bd10      	pop	{r4, pc}
 80055e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055ea:	e7f7      	b.n	80055dc <memmove+0x24>

080055ec <_sbrk_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	2300      	movs	r3, #0
 80055f0:	4d05      	ldr	r5, [pc, #20]	@ (8005608 <_sbrk_r+0x1c>)
 80055f2:	4604      	mov	r4, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	602b      	str	r3, [r5, #0]
 80055f8:	f7fb fce2 	bl	8000fc0 <_sbrk>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_sbrk_r+0x1a>
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	b103      	cbz	r3, 8005606 <_sbrk_r+0x1a>
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	20000434 	.word	0x20000434

0800560c <memchr>:
 800560c:	4603      	mov	r3, r0
 800560e:	b510      	push	{r4, lr}
 8005610:	b2c9      	uxtb	r1, r1
 8005612:	4402      	add	r2, r0
 8005614:	4293      	cmp	r3, r2
 8005616:	4618      	mov	r0, r3
 8005618:	d101      	bne.n	800561e <memchr+0x12>
 800561a:	2000      	movs	r0, #0
 800561c:	e003      	b.n	8005626 <memchr+0x1a>
 800561e:	7804      	ldrb	r4, [r0, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	428c      	cmp	r4, r1
 8005624:	d1f6      	bne.n	8005614 <memchr+0x8>
 8005626:	bd10      	pop	{r4, pc}

08005628 <memcpy>:
 8005628:	440a      	add	r2, r1
 800562a:	4291      	cmp	r1, r2
 800562c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005630:	d100      	bne.n	8005634 <memcpy+0xc>
 8005632:	4770      	bx	lr
 8005634:	b510      	push	{r4, lr}
 8005636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800563a:	4291      	cmp	r1, r2
 800563c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005640:	d1f9      	bne.n	8005636 <memcpy+0xe>
 8005642:	bd10      	pop	{r4, pc}

08005644 <_realloc_r>:
 8005644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005648:	4680      	mov	r8, r0
 800564a:	4615      	mov	r5, r2
 800564c:	460c      	mov	r4, r1
 800564e:	b921      	cbnz	r1, 800565a <_realloc_r+0x16>
 8005650:	4611      	mov	r1, r2
 8005652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005656:	f7ff bc39 	b.w	8004ecc <_malloc_r>
 800565a:	b92a      	cbnz	r2, 8005668 <_realloc_r+0x24>
 800565c:	f7ff fbcc 	bl	8004df8 <_free_r>
 8005660:	2400      	movs	r4, #0
 8005662:	4620      	mov	r0, r4
 8005664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005668:	f000 f81a 	bl	80056a0 <_malloc_usable_size_r>
 800566c:	4285      	cmp	r5, r0
 800566e:	4606      	mov	r6, r0
 8005670:	d802      	bhi.n	8005678 <_realloc_r+0x34>
 8005672:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005676:	d8f4      	bhi.n	8005662 <_realloc_r+0x1e>
 8005678:	4629      	mov	r1, r5
 800567a:	4640      	mov	r0, r8
 800567c:	f7ff fc26 	bl	8004ecc <_malloc_r>
 8005680:	4607      	mov	r7, r0
 8005682:	2800      	cmp	r0, #0
 8005684:	d0ec      	beq.n	8005660 <_realloc_r+0x1c>
 8005686:	42b5      	cmp	r5, r6
 8005688:	462a      	mov	r2, r5
 800568a:	4621      	mov	r1, r4
 800568c:	bf28      	it	cs
 800568e:	4632      	movcs	r2, r6
 8005690:	f7ff ffca 	bl	8005628 <memcpy>
 8005694:	4621      	mov	r1, r4
 8005696:	4640      	mov	r0, r8
 8005698:	f7ff fbae 	bl	8004df8 <_free_r>
 800569c:	463c      	mov	r4, r7
 800569e:	e7e0      	b.n	8005662 <_realloc_r+0x1e>

080056a0 <_malloc_usable_size_r>:
 80056a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056a4:	1f18      	subs	r0, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bfbc      	itt	lt
 80056aa:	580b      	ldrlt	r3, [r1, r0]
 80056ac:	18c0      	addlt	r0, r0, r3
 80056ae:	4770      	bx	lr

080056b0 <_init>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	bf00      	nop
 80056b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b6:	bc08      	pop	{r3}
 80056b8:	469e      	mov	lr, r3
 80056ba:	4770      	bx	lr

080056bc <_fini>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr
